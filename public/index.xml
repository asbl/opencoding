<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>opencoding</title>
    <link>https://opencoding.de/</link>
    <description>Recent content on opencoding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    
	<atom:link href="https://opencoding.de/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Einfache Sortieralgorithmen</title>
      <link>https://opencoding.de/datenstrukturen-und-algorithmen/01_einfache_sortieralgorithmen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/datenstrukturen-und-algorithmen/01_einfache_sortieralgorithmen/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Erste Schritte</title>
      <link>https://opencoding.de/data-science/01_erste_schritte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/data-science/01_erste_schritte/</guid>
      <description>In diesem Tutorial werden dir erste Schritte in den Bereich Data-Science gezeigt.
Wir wird gezeigt, wie du Daten in Listen darstellst und wie du diese mit der Bibliothek matplotlib grafisch anzeigst.</description>
    </item>
    
    <item>
      <title>Erste Schritte</title>
      <link>https://opencoding.de/python-mit-pygame/01_erste_schritte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python-mit-pygame/01_erste_schritte/</guid>
      <description>Installation Thonny Installiere über Tools -&amp;gt; Manage Packages die Bibliothek pygame
Erste Schritte Folgender Code erstellt ein Fenster, dass sofort wieder verschwindet:
import pygame pygame.init() screen = pygame.display.set_mode((200,100))  Die Mainloop Nun brauchst du eine Mainloop. Ergänze dazu folgenden Code:
running = True while running: for event in pygame.event.get(): if event.type == pygame.QUIT: running = False  Bilder zeichnen Zeichne etwas auf den Bildschirm.
Dazu brauchst du 3 Zeilen Code:</description>
    </item>
    
    <item>
      <title>Erste Schritte (Entscheidungen if-then-else)</title>
      <link>https://opencoding.de/python_textadventures/01_first_steps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_textadventures/01_first_steps/</guid>
      <description>1. Die Mainloop Schreibe folgenden Code:
zustand = &amp;quot;Eingang&amp;quot; while zustand!= &amp;quot;Ende&amp;quot;: pass  Damit hast du eine Endlosschleife und das Grundgerüst für dein späteres Textadventure. Innerhalb dieser Endlosschleife kannst du jetzt Aktionen abfragen.
Du kannst dein Programm in Thonny mit dem Stop-Icon beenden, sonst läuft es ewig weiter:
2. Entscheidungen Jetzt wird eine Entscheidung ergänzt:
1 while zustand != &amp;quot;Ende&amp;quot;: 2 print(&amp;quot;Du stehst an folgendem Ort: &amp;quot; + zustand) 3 entscheidung = input(&amp;quot;In welche Richtung gehst du?</description>
    </item>
    
    <item>
      <title>HTML Grundgerüst</title>
      <link>https://opencoding.de/html/01_html_grundgeruest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/01_html_grundgeruest/</guid>
      <description>Arbeitsauftrag Lege eine Datei index.html mit folgendem Inhalt an und schreibe zwischen &amp;lt;body&amp;gt; und &amp;lt;/body&amp;gt; einen kurzen Text. Lasse dir diesen im Browser (oder im repl-Fenster anzeigen.)
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;de&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Titel der Einzelseite&amp;lt;/title&amp;gt; &amp;lt;link href=&amp;quot;style.css&amp;quot; type=&amp;quot;text/css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  Hinweis für Windows-Benutzer Wenn du die Endung .html der Datei nicht ändern kannst, musst du die Windows-Option „Bekannte Dateiendungen ausblenden“ deaktivieren.
Mehr Infos über HTML Ein HTML-Dokument ist folgendermaßen aufgebaut:</description>
    </item>
    
    <item>
      <title>Impressum</title>
      <link>https://opencoding.de/impressum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/impressum/</guid>
      <description>Andreas Siebel
Usinger Straße 1
61273 Wehrheim
Kontakt:
E-Mail: a.siebel@cws-usingen.de</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://opencoding.de/python_mit_turtle/01_installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/01_installation/</guid>
      <description>Zunächst musst du Python installieren. Dies geht auf verschiedene Arten:
 Thonny ist eine integrierte Entwicklungsumgebungen für Anfänger. repl.it ist eine Plattform, auf der du in vielen verschiedenen Sprachen programmieren kannst.  In mannchen Schulen ist das Installieren von Anwendungen gesperrt. In diesen Fall musst du Option 2 wählen.
Thonny Installiere Thonny auf deinem Rechner-. Manchmal kann Thonny auf den Rechnern ohne vollen Zugriff nicht installiert werden, da der Installationsdialog kein Verzeichnis anbietet.</description>
    </item>
    
    <item>
      <title>Operationen</title>
      <link>https://opencoding.de/python_mit_turtle/00_operationen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/00_operationen/</guid>
      <description>Du benötigst folgende Operationen. Kehre hierhin zurück, wenn du vergessen hast, wie du die turtle steuern kannst.
   Befehl Beschreibung     turtle.forward() Gehe vorwärts   turtle.backward() Gehe rückwärts   turtle.right(x) Drehe dich um x Grad nach rechts   turtle.left(x) Drehe dich um x Grad nach links   turtle.penup() Hebe den Stift an (Bewege dich weiter, ohne zu zeichnen)   turtle.pendown() Setzt den Stift wieder ab, so dass du weiterzeichnest   turtle.</description>
    </item>
    
    <item>
      <title>Python Basics</title>
      <link>https://opencoding.de/python_mit_turtle/02_basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/02_basics/</guid>
      <description>Grundlagen Ein erster Code kann folgendermaßen aussehen:
 Aufgabe 1.1: Zeichne ein Quadrat mit roter Stiftfarbe Zeichne ein Quadrat mit roter Stiftfarbe wie im folgenden Beispiel:
  Lösung anzeigen   import turtle turtle.fillcolor(“Brown”) turtle.begin_fill() turtle.pencolor(“Red”) turtle.forward (100) turtle.right (90) turtle.forward (100) turtle.right (90) turtle.forward (100) turtle.right (90) turtle.forward (100) turtle.end_fill()    Aufgabe 1.2: Zeichne ein Quadrat (2) Zeichne ein Quadrat mit den Seitenlängen 180 mit einer lila (&amp;ldquo;purple&amp;rdquo;) Linie und blauer (&amp;ldquo;blue) Füllung.</description>
    </item>
    
    <item>
      <title>Die Mainloop</title>
      <link>https://opencoding.de/python-mit-pygame/02_mainloop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python-mit-pygame/02_mainloop/</guid>
      <description>Nun brauchst du eine Mainloop, d.h. eine Schleife die ständig läuft, bis die Zustandsvariable running den Wert False annimmt (z.B. wenn der Benutzer auf das x-Symbol des Fensters klickt.)
Ergänze dazu folgenden Code:
running = True while running: for event in pygame.event.get(): if event.type == pygame.QUIT: running = False  </description>
    </item>
    
    <item>
      <title>Easygui</title>
      <link>https://opencoding.de/python_textadventures/02_easygui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_textadventures/02_easygui/</guid>
      <description>Eine grafische Benutzeroberfläche Installation Thonny: Installiere zunächst das Package Easy-Gui
 Wähle dazu in Thonny das Menü: &amp;ldquo;Tools&amp;rdquo; -&amp;gt; &amp;ldquo;Manage Packages&amp;rdquo;
 Suche nach EasyGui und klicke auf install.
  repl.it In repl.it werden Pakete automatisch installiert, wenn du sie mit der import-Anweisung importierst.
Erste Schritte Jetzt kannst du folgendermaßen EasyGui Dialoge einbinden.
import easygui zustand = &amp;quot;Eingang&amp;quot; while zustand != &amp;quot;Ende&amp;quot;: easygui.msgbox(&amp;quot;Du stehst an folgendem Ort: &amp;quot; + zustand, &amp;quot;Mein Textadventure&amp;quot;) entscheidung = easygui.</description>
    </item>
    
    <item>
      <title>Listen</title>
      <link>https://opencoding.de/data-science/02_listen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/data-science/02_listen/</guid>
      <description>Oft will man mehrere Daten in Folge speichern, z.B. die Temperaturdaten eines Monats. Dann ist es aber unpraktisch, für jede Information eine eigene Variable einzuführen.
Ohne Listen müsstest du jeden Wert in einer einzelnen Variable speichern:
d1 = 14.2 d2 = 13.2 d3 = 15.2 ...  Mit Listen geht dies in Kurzform:
list = [14.2, 13.2, 15.2, ... ]  </description>
    </item>
    
    <item>
      <title>Rekursion</title>
      <link>https://opencoding.de/datenstrukturen-und-algorithmen/02_rekursion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/datenstrukturen-und-algorithmen/02_rekursion/</guid>
      <description>Was ist Rekursion? Beschreiben sie anhand folgender Beispiele, was Rekursion bedeutet
1. Kunst Beschreiben Sie, was die Bilder gemeinsam haben. Wie entstehen die Bilder?
Mandelbrot-Menge: Sirpinski Dreieck: 2. Treppenstufen Suche für folgende Aufgabe eine Treppe. Berechnen, wie viele unterschiedliche Möglichkeiten es nach folgenden Regeln gibt, wie man eine bestimmte Stufe erreichen kann.
 Du beginnst auf Treppenstufe 0 Du musst Stufe 1 betreten. Wenn man nicht auf der 0. Stufe steht, kannst du immer entweder auf die nächste oder auch auf die übernächste Stufe steigen.</description>
    </item>
    
    <item>
      <title>Tags</title>
      <link>https://opencoding.de/html/02_tags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/02_tags/</guid>
      <description>Arbeitsauftrag Schreibe jetzt erste Inhalte zwischen &amp;lt;body&amp;gt;und &amp;lt;/body&amp;gt; und gestalte die Inhalte mit Tags.
Syntax Verwende dabei folgende Tags:
&amp;lt;h1&amp;gt; Überschrift Ebene 1 &amp;lt;/h1&amp;gt; &amp;lt;h2&amp;gt; Überschrift Ebene 2 &amp;lt;/h2&amp;gt; ... &amp;lt;h3&amp;gt; Überschrift Ebene 3 &amp;lt;/h3&amp;gt; Ein Zeilen&amp;lt;br/&amp;gt; umbruch &amp;lt;p&amp;gt; Umschließe Absätze mit p Tags &amp;lt;/p&amp;gt; &amp;lt;b&amp;gt;fett&amp;lt;/b&amp;gt; &amp;lt;i&amp;gt;kursiv&amp;lt;/i&amp;gt; &amp;lt;u&amp;gt;Unterstrichen&amp;lt;/u&amp;gt; &amp;lt;!--Kommentar Kommentare werden nicht im Dokument angezeigt. Sie dienen dir beim Schreiben als Hilfe--&amp;gt;  Mehr Infos über Tags  Mehr Tags findest du hier: https://www.</description>
    </item>
    
    <item>
      <title>Attribute</title>
      <link>https://opencoding.de/html/03_attribute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/03_attribute/</guid>
      <description>Arbeitsauftrag Einige Tags können durch zusätzliche Informationen innerhalb des Tags ergänzt werden. Man nennt diese Informationen Attribute. Füge in deinem Dokument zu einem oder mehreren Tags geeignete Attribute hinzu.
Syntax &amp;lt;p align=&amp;quot;right&amp;quot;&amp;gt;Inhalt&amp;lt;/p&amp;gt;  Dies ordnet den Inhalt rechtsbündig an (Alternativen: right | left | center)
Mehr über Attribute  Hier findest du viele weitere Attribute: https://developer.mozilla.org/de/docs/Web/HTML/Attributes
 Es ist zwar möglich mit Attributen dein Dokument zu layouten (z.B. über color, bgcolor, width, height, …).</description>
    </item>
    
    <item>
      <title>Bilder zeichnen</title>
      <link>https://opencoding.de/python-mit-pygame/03_bilder_zeichnen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python-mit-pygame/03_bilder_zeichnen/</guid>
      <description>Zeichne etwas auf den Bildschirm.
Dazu brauchst du 3 Zeilen Code:
image = pygame.image.load(&amp;quot;[Dateiname].png&amp;quot;)  Diese Zeile lädt das Bild. Achtung: Das Bild muss im selben Verzeichnis wie dein Programm liegen und du musst den Dateinamen entsprechend setzen
screen.blit(image, (50,50))  Diese Zeile blittet das Bild an die Position (50|50) (beachte, dass der Ursprung beim Bildschirm in der oberen Ecke sitzt)
pygame.display.flip()  Diese Zeile sorgt dafür, dass das Display neu geladen wird.</description>
    </item>
    
    <item>
      <title>Funktionen</title>
      <link>https://opencoding.de/python_textadventures/03_funktionen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_textadventures/03_funktionen/</guid>
      <description>Je komplexer unser Programm wird, umso mehr macht es Sinn, Teile in Unterprogramme auszulagern. Dies geht mi elif entscheidung == &amp;ldquo;ende&amp;rdquo;: zustand = &amp;ldquo;Ende&amp;rdquo;t Hilfe von Funktionen.
An dieser Stelle wird eine Funktion Haupteingang geschrieben:
def haupteingang(): easygui.msgbox(&amp;quot;Du stehst am Eingang&amp;quot;) entscheidung = easygui.buttonbox(&amp;quot;Wohin gehst du&amp;quot;, &amp;quot;Mein Textadventure&amp;quot;, [&amp;quot;links&amp;quot;, &amp;quot;rechts&amp;quot;, &amp;quot;ende&amp;quot;]) if entscheidung == &amp;quot;links&amp;quot;: neuer_zustand = &amp;quot;Seiteneingang links&amp;quot; elif entscheidung == &amp;quot;rechts&amp;quot;: neuer_zustand = &amp;quot;Seiteneingang rechts&amp;quot; elif entscheidung == &amp;quot;ende&amp;quot;: zustand = &amp;quot;Ende&amp;quot; return neuer_zustand  Das Unterprogramm trägt den Namen Haupteingang und hat den Parameter entscheidung.</description>
    </item>
    
    <item>
      <title>Matplotlib</title>
      <link>https://opencoding.de/data-science/03_matplotlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/data-science/03_matplotlib/</guid>
      <description>Installiere in Thonny die Bibliothek matplotlib und importiere diese:
import matplotlib as mlp import matplotlib.pyplot as plt  (Das Alias as im Import sagt, dass du die Bibliothek in Zukunft mit mpl aufrufen kannst - So sparst du dir Schreibarbeit)
Jetzt kannst du deinen ersten Plot anzeigen:
plt.plot([1,2,3,4], [1,4,9,16], &#39;bo&#39;) plt.show()   Das erste Argument der Funktion ist eine Liste mit x-Werten
 Das zweite Argument der Funktion ist eine Liste mit y-Werten</description>
    </item>
    
    <item>
      <title>Schleifen</title>
      <link>https://opencoding.de/python_mit_turtle/03_schleifen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/03_schleifen/</guid>
      <description>Lektion 2: Schleifen Aufgabe 2.1: Schleifen Meist ist es nicht sehr effizient die selben Anweisungen mehrfach zu schreiben. Im folgenden Programm siehst du, wie du etwas wiederholen kannst. Die Zeilen 3 und 4 sind eingerückt - dies ist wichtig- um dem Programm mitzuteilen, dass diese Zeilen innerhalb der Schleife wiederholt werden:
import turtle for i in range(4): turtle.forward(100) turtle.right(90)  Grafisch kann man den Programmablauf in einem Flussdiagramm visualisieren:</description>
    </item>
    
    <item>
      <title>Bewegungen</title>
      <link>https://opencoding.de/python-mit-pygame/04_bewegungen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python-mit-pygame/04_bewegungen/</guid>
      <description>Bewegungen kannst du hinzufügen, wenn du die festen Koordinaten, an die du ein Bild geblittet hast, variabel machst:
x = 10 y = 10 stepx = 1 stepy = 1 while running: screen.blit(image, (x, y)) x = x+stepx  Wie du siehst entstehen zwei Probleme:
 Dein Bild hinterlässt eine Spur Dein Bild verschwindet aus dem Bildschirm.  Problem 1. lässt sich lösen, indem man zu Beginn der Mainloop immer erstmal den kompletten Bildschirm löscht:</description>
    </item>
    
    <item>
      <title>Eingaben</title>
      <link>https://opencoding.de/python_mit_turtle/04_eingaben/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/04_eingaben/</guid>
      <description>Lektion 3: Benutzereingaben Aufgabe 3.1 Führe das folgende Programm aus und beobachte, was passiert:
 a) Beschreibe, was das Programm macht
b) Erkläre was die Zeilen 2 und 3 des Programmes tun.
  Lösung anzeigen   In Zeile 2 passieren 3 Dinge in folgender Reihenfolge:
 Eine Benutzereingabe wird mit der Funktion input() eingelesen.
 Die Funktion int() wandelt die Benutzereingabe in eine Zahl um.
 Die umgewandelte Zahl wird gespeichert und ist über den Namen x zugreifbar.</description>
    </item>
    
    <item>
      <title>Hyperlinks</title>
      <link>https://opencoding.de/html/04_hyperlinks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/04_hyperlinks/</guid>
      <description>Arbeitsauftrag Erstelle in deinem Dokument einen Hyperlink zu &amp;hellip;
 Einer fremden Webseite Einer anderen HTML-Datei im selben Ordner, die du selbst angelegt hast. Einer Datei in einem Unterordner deiner HTML-Datei  Syntax Ein Hyperlink wird folgender Syntax erstellt:
&amp;lt;a href=“[Url]“&amp;gt;Name des Links&amp;lt;/a&amp;gt;  Die [URL] kann dabei sowohl auf eine andere Webseite verweisen als auch auf eine Datei relativ zum eigenen Pfad.
Beispiele:
&amp;lt;a href=“http://www.cws-usingen.de“&amp;gt;CWS Usingen&amp;lt;/a&amp;gt; &amp;lt;a href=“impressum.html“&amp;gt;Impressum&amp;lt;/a&amp;gt; &amp;lt;a href=“unterordner/impressum.</description>
    </item>
    
    <item>
      <title>Weitere Ideen</title>
      <link>https://opencoding.de/python_textadventures/04_weitere_ideen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_textadventures/04_weitere_ideen/</guid>
      <description>Zufall Oft sollen Dinge vom Zufall abhängen. Dies kannst du in Python folgendermaßen machen:
import random print(&amp;quot;Würfle mit einem Würfel&amp;quot;) wuerfel = random.randint(1,6) print(wuerfel)  Überlege dir, wie du mit Hilfe dieser Funktion Zufallszahlen in dein Programm einbauen kann
Inventar - Für fortgeschrittene Wenn es viele mögliche Gegenstände gibt, die ein Charakter mit sich führen kann, dann wird es schnell unübersichtlich, wenn du für jeden Gegenstand eine einzelne Variable hinzufügst.</description>
    </item>
    
    <item>
      <title>Bilder</title>
      <link>https://opencoding.de/html/05_bilder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/05_bilder/</guid>
      <description>Arbeitsauftrag Füge ein Bild in dein Dokument ein. Achte dabei auf das Urheberrecht.
Syntax Bilder werden mit dem img-Tag eingebunden:
&amp;lt;img src=“pfad zum element“ alt=“Alternative Beschreibung“ height=“40“ width=“20“/&amp;gt;   Das img-Attribut hat keinen Inhalt. Daher schreibt man üblicherweise am Ende des Tags /&amp;gt; was bedeutet, dass das Tag direkt nach dem öffnen wieder geschlossen wird.
 Das src-Attribut funktioniert genauso wie das href-Attribut bei Links. Man kann genauso Dateien relativ zum aktuellen Pfad oder absolut verlinken.</description>
    </item>
    
    <item>
      <title>Funktionen</title>
      <link>https://opencoding.de/python_mit_turtle/05_funktionen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/05_funktionen/</guid>
      <description>Aufgabe 1 Wenn du größere Programme schreibst, ist es am einfachsten, wenn du diese in Teilprogramme zerlegen kannst.
In Python funktioniert dies mit Funktionen (oder auch Subroutinen). Das folgende Programm erstellt eine Funktion, um ein kleines Quadrat zu zeichnen. Anschließend wird die Funktion einmal aufgerufen:
import turtle def square(): for i in range(4): turtle.forward(30) turtle.right(90) square()   Das Schlüsselworts def steht für define. Mit diesem Schlüsselwort wird signalisiert, dass im folgenden eine Funktion definiert wird.</description>
    </item>
    
    <item>
      <title>Mehr Infos</title>
      <link>https://opencoding.de/python-mit-pygame/05_mehr_infos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python-mit-pygame/05_mehr_infos/</guid>
      <description>Hier findest du ein umfangreicheres Tutorial: https://dr0id.bitbucket.io/legacy/pygame_tutorials.html</description>
    </item>
    
    <item>
      <title>Tabellen</title>
      <link>https://opencoding.de/html/06_tabellen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/06_tabellen/</guid>
      <description>Arbeitsauftrag Füge eine Tabelle in deinem Dokument hinzu.
Syntax Tabellen können in html mit folgender Syntax erstellt werden:
&amp;lt;table&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Zeile 1 – Spalte 1 &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Zeile 1 – Spalte 2&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Zeile 1 – Spalte 3&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Zeile 2– Spalte 1&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Zeile 2 – Spalte 2&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Zeile 2 – Spalte 3&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt;  Der Code erzeugt folgende Tabelle:
  Zeile 1 – Spalte 1  Zeile 1 – Spalte 2Zeile 1 – Spalte 3  Zeile 2– Spalte 1 Zeile 2 – Spalte 2 Zeile 2 – Spalte 3   Tags  &amp;lt;table&amp;gt; : Das Table-Element umschließt die ganze Tabelle</description>
    </item>
    
    <item>
      <title>Zufall</title>
      <link>https://opencoding.de/python_mit_turtle/06_zufall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/06_zufall/</guid>
      <description>Aufgabe 1: Zufällige Rechtecke Erstelle ein neues Programm.
Damit wir zufällige Quadrate zeichnen können, benötigen wir die random() Funktion. Wir werden eine zufällige Zahl erstellen und dann dieser Zahl eine Farbe zuweisen.
Betrachte dazu folgendes Programm (Hinweis: Zeilen, die mit # beginnen sind Kommentare, die vom Computer nicht gelesen werden, sondern dazu gedacht sind von Menschen gelesen zu werden):
  if bedeutet: Falls die Bedingung gegeben ist, führe den eingerückten Code aus.</description>
    </item>
    
    <item>
      <title>Listen</title>
      <link>https://opencoding.de/html/07_listen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/07_listen/</guid>
      <description>Arbeitsauftrag Erstelle verschiedene Arten von Listen in deinem Dokument.
Syntax Listen können ähnlich wie Tabellen erstellt werden:
Syntax Ungeordnete Listen: &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Unterpunkt 1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Unterpunkt 2&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;  &amp;hellip; wird zu:
 Unterpunkt 1 Unterpunkt 2  Nummerierte Listen &amp;lt;ol&amp;gt; &amp;lt;li&amp;gt;Unterpunkt 1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Unterpunkt 2&amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt;  &amp;hellip; wird zu:
 Unterpunkt 1 Unterpunkt 2  Definitionslisten: Weiterhin gibt es noch Definitionslisten z.B. für Listen von Abkürzungen oder Vokabeln:
Definitionslisten werden mit dem Tag &amp;lt;dl&amp;gt; umschlossen.</description>
    </item>
    
    <item>
      <title>Zufallsmuster</title>
      <link>https://opencoding.de/python_mit_turtle/07_zufallsmuster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/07_zufallsmuster/</guid>
      <description>Aufgabe 1: Grundsätzliche Überlegungen Das folgende Programm erstellt eine Form:
import turtle def shape(): for i in range(4): turtle.forward(50) turtle.right(90) shape()  Beantworte folgende Fragen, passe das Programm dafür an:
 Wie müsste man das Programm verändern, wenn man eine dreiseitige Figur erstellen möchte?
 Wie müsste man das Programm verändern, wenn man eine fünfseitige Figur erstellen möchte?
 Was ist die Beziehung zwischen Seitenanzahl und Winkel, den die Turtle zeichnen muss.</description>
    </item>
    
    <item>
      <title>CSS</title>
      <link>https://opencoding.de/html/08_css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/08_css/</guid>
      <description>Arbeitsauftrag HTML-Code kann mit Hilfe von CSS (Cascading Style Sheets) gestaltet werden.
Eine CSS Datei erstellen Erstelle eine neue Datei im gleichen Ordner wie deine HTML-Datei mit den Namen style.css.
Schreibe in die Datei folgenden Text:
b { color: red; }  Der Code gibt allen &amp;lt;b&amp;gt; Tags eine rote Farbe. Bevor du die Änderung sehen kannst, musst du die Datei noch in HTML einbinden.
CSS-Datei im HTML-Code einbinden Dafür muss innerhalb des head-Tags folgender Code eingefügt werden.</description>
    </item>
    
    <item>
      <title>Farben</title>
      <link>https://opencoding.de/html/09_farben/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/09_farben/</guid>
      <description>Arbeitsauftrag  Markiere einen Text in deinem HTML-Dokument farbig. Färbe den Hintergrund eines HTML-Dokumentes farbig.  Syntax Zum Setzen von Farben kannst du die Attribute color und background-color verwenden.
Als Wert kannst du entweder Farben mit Namen (red, green, &amp;hellip;) oder als Farbcode angeben, z.B. in der folgenden Form:
color: black; background-color: green;  Farbcodes Farben können auch als Farbcode angegeben werden, z.B. als rgb-Wert (rgb: red, green, blue).</description>
    </item>
    
    <item>
      <title>Das Box-Modell</title>
      <link>https://opencoding.de/html/10_boxmodell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/10_boxmodell/</guid>
      <description>Arbeitsauftrag Erstelle mit dem Tag &amp;lt;div&amp;gt; einen Bereich mit Text, färbe den Hintergrund und lege Innen-und Außenabstände dieses Bereichs fest.
Theorie: Das Boxmodell Wenn die Hintergrundfarben, Rahmen und Abstände zeichnen willst, ist es wichtig das Box-Modell von HTML / CSS zu verstehen:
Jedes Tag wird entweder inline dargestellt oder als Block.
Du kannst die Eigenschaft umstellen mit dem Attribut display .
Beispiel: Ein link wird normalerweise inline im Text dargestellt.</description>
    </item>
    
    <item>
      <title>Klassen</title>
      <link>https://opencoding.de/html/11_klassen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/11_klassen/</guid>
      <description>Arbeitsauftrag Erstelle mehrere Tags gleicher Art. Gestalte mit Hilfe von Klassen nur einzelne Objekte dieses Tags.
Du kannst z.B. mehrere Links erstellen und einige Links als button gestalten.
Theorie: Klassen Klassen sind im Baupläne oder Schablonen. Die Idee ist es, CSS Code wiederzuverwenden, denn mit Hilfe von Klassen must du nicht jeden einzelnen Link einzeln formatieren.
Beispiel: Buttons Sollen bestimmte Links als Buttons gezeigt werden, so weist man all diesen Links die Klasse button zu.</description>
    </item>
    
    <item>
      <title>Klassen</title>
      <link>https://opencoding.de/html/12_klassen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/12_klassen/</guid>
      <description>Arbeitsauftrag Erstelle mehrere Tags gleicher Art. Gestalte mit Hilfe von Klassen nur einzelne Objekte dieses Tags.
Du kannst z.B. mehrere Links erstellen und einige Links als button gestalten.
Theorie: Klassen Klassen sind im Baupläne oder Schablonen. Die Idee ist es, CSS Code wiederzuverwenden, denn mit Hilfe von Klassen must du nicht jeden einzelnen Link einzeln formatieren.
Beispiel: Buttons Sollen bestimmte Links als Buttons gezeigt werden, so weist man all diesen Links die Klasse button zu.</description>
    </item>
    
    <item>
      <title>Links und Pseudoklassen</title>
      <link>https://opencoding.de/html/12_links_pseudoklassen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/12_links_pseudoklassen/</guid>
      <description>Arbeitsauftrag Erstelle einen Link und gestalte mit CSS den Link unterschiedlich je anchdem, ob dieser bereits besucht wurde oder noch nicht besucht wurde. Füge einen Hover-Effekt beim Überfahren mit der Maus hinzu.
Theorie: Pseudoklassen Beim gestalten von Links gibt es eine Besonderheit, die man beachten muss:
Links können verschiedene Zustände haben, je nachdem, ob diese bereits besucht wurden. Man kann diese folgendermaßen stylen:
a:link bezeichnet einen noch nicht besuchten Link.</description>
    </item>
    
    <item>
      <title>Wichtige Ideen und Konzepte</title>
      <link>https://opencoding.de/html/wichtige-ideen-und-konzepte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/wichtige-ideen-und-konzepte/</guid>
      <description> Trennung von Layout, Struktur und Inhalt Relative und Absolute Bezüge Klassen und Objekte  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://opencoding.de/html/layout_struktur_inhalt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/html/layout_struktur_inhalt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Datenschutzerklärung</title>
      <link>https://opencoding.de/datenschutz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/datenschutz/</guid>
      <description>Datenschutzerklärung Generelle Informationen Dieses Blog wird bei Uberspace gehostet. Wenn Sie dieses Blog besuchen, werden automatisch einige Daten an den Webserver übertragen und dort gespeichert. Dies ist zur Anzeige dieser Webseite technisch erforderlich und beschränkt sich auf den dafür notwendigen Umfang. Es handelt sich insbesondere um folgende Informationen: die Referrer-URL (die Webseite, von der Sie kommen) / die IP-Adresse des Gerätes, mit dem sie auf den Blog zugreifen / den verwendeten Browser / Uhrzeit und Datum / das verwendete Betriebssystem.</description>
    </item>
    
  </channel>
</rss>