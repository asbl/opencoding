<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>opencoding</title>
    <link>https://opencoding.de/</link>
    <description>Recent content on opencoding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    
	<atom:link href="https://opencoding.de/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Erste Schritte</title>
      <link>https://opencoding.de/data-science/01_erste_schritte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/data-science/01_erste_schritte/</guid>
      <description>In diesem Tutorial werden dir erste Schritte in den Bereich Data-Science gezeigt.
Wir wird gezeigt, wie du Daten in Listen darstellst und wie du diese mit der Bibliothek matplotlib grafisch anzeigst.</description>
    </item>
    
    <item>
      <title>Erste Schritte</title>
      <link>https://opencoding.de/python-mit-pygame/01_erste_schritte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python-mit-pygame/01_erste_schritte/</guid>
      <description>Installation Thonny Installiere über Tools -&amp;gt; Manage Packages die Bibliothek pygame
Erste Schritte Folgender Code erstellt ein Fenster, dass sofort wieder verschwindet:
import pygame pygame.init() screen = pygame.display.set_mode((200,100))  Die Mainloop Nun brauchst du eine Mainloop. Ergänze dazu folgenden Code:
running = True while running: for event in pygame.event.get(): if event.type == pygame.QUIT: running = False  Bilder zeichnen Zeichne etwas auf den Bildschirm.
Dazu brauchst du 3 Zeilen Code:</description>
    </item>
    
    <item>
      <title>Erste Schritte (Entscheidungen if-then-else)</title>
      <link>https://opencoding.de/python_textadventures/01_first_steps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_textadventures/01_first_steps/</guid>
      <description>1. Die Mainloop Schreibe folgenden Code:
zustand = &amp;quot;Eingang&amp;quot; while zustand!= &amp;quot;Ende&amp;quot;: pass  Damit hast du eine Endlosschleife und das Grundgerüst für dein späteres Textadventure. Innerhalb dieser Endlosschleife kannst du jetzt Aktionen abfragen.
Du kannst dein Programm in Thonny mit dem Stop-Icon beenden, sonst läuft es ewig weiter:
2. Entscheidungen Jetzt wird eine Entscheidung ergänzt:
while zustand != &amp;quot;Ende&amp;quot;: print(&amp;quot;Du stehst an folgendem Ort: &amp;quot; + zustand) entscheidung = input(&amp;quot;In welche Richtung gehst du?</description>
    </item>
    
    <item>
      <title>Impressum</title>
      <link>https://opencoding.de/impressum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/impressum/</guid>
      <description>Andreas Siebel
Usinger Straße 1
61273 Wehrheim
Kontakt:
E-Mail: a.siebel@cws-usingen.de</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://opencoding.de/python_mit_turtle/01_installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/01_installation/</guid>
      <description>Zunächst musst du Python installieren. Dies geht auf verschiedene Arten:
 Thonny ist eine integrierte Entwicklungsumgebungen für Anfänger. repl.it ist eine Plattform, auf der du in vielen verschiedenen Sprachen programmieren kannst.  In mannchen Schulen ist das Installieren von Anwendungen gesperrt. In diesen Fall musst du Option 2 wählen.
Thonny Installiere Thonny auf deinem Rechner-. Manchmal kann Thonny auf den Rechnern ohne vollen Zugriff nicht installiert werden, da der Installationsdialog kein Verzeichnis anbietet.</description>
    </item>
    
    <item>
      <title>Python Basics</title>
      <link>https://opencoding.de/python_mit_turtle/02_basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/02_basics/</guid>
      <description>Operationen    Befehl Beschreibung     turtle.forward() Gehe vorwärts   turtle.backward() Gehe rückwärts   turtle.right(x) Drehe dich um x Grad nach rechts   turtle.left(x) Drehe dich um x Grad nach links   turtle.penup() Hebe den Stift an (Bewege dich weiter, ohne zu zeichnen)   turtle.pendown() Setzt den Stift wieder ab, so dass du weiterzeichnest   turtle.fillcolor(&amp;ldquo;brown&amp;rdquo;) Ändert die Füllfarbe auf Braun   turtle.</description>
    </item>
    
    <item>
      <title>Die Mainloop</title>
      <link>https://opencoding.de/python-mit-pygame/02_mainloop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python-mit-pygame/02_mainloop/</guid>
      <description>Nun brauchst du eine Mainloop, d.h. eine Schleife die ständig läuft, bis die Zustandsvariable running den Wert False annimmt (z.B. wenn der Benutzer auf das x-Symbol des Fensters klickt.)
Ergänze dazu folgenden Code:
running = True while running: for event in pygame.event.get(): if event.type == pygame.QUIT: running = False  </description>
    </item>
    
    <item>
      <title>Easygui</title>
      <link>https://opencoding.de/python_textadventures/02_easygui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_textadventures/02_easygui/</guid>
      <description>Eine grafische Benutzeroberfläche Installation Thonny: Installiere zunächst das Package Easy-Gui
 Wähle dazu in Thonny das Menü: &amp;ldquo;Tools&amp;rdquo; -&amp;gt; &amp;ldquo;Manage Packages&amp;rdquo;
 Suche nach EasyGui und klicke auf install.
  repl.it In repl.it werden Pakete automatisch installiert, wenn du sie mit der import-Anweisung importierst.
Erste Schritte Jetzt kannst du folgendermaßen EasyGui Dialoge einbinden.
import easygui zustand = &amp;quot;Eingang&amp;quot; while zustand != &amp;quot;Ende&amp;quot;: easygui.msgbox(&amp;quot;Du stehst an folgendem Ort: &amp;quot; + zustand, &amp;quot;Mein Textadventure&amp;quot;) entscheidung = easygui.</description>
    </item>
    
    <item>
      <title>Listen</title>
      <link>https://opencoding.de/data-science/02_listen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/data-science/02_listen/</guid>
      <description>Oft will man mehrere Daten in Folge speichern, z.B. die Temperaturdaten eines Monats. Dann ist es aber unpraktisch, für jede Information eine eigene Variable einzuführen.
Ohne Listen müsstest du jeden Wert in einer einzelnen Variable speichern:
d1 = 14.2 d2 = 13.2 d3 = 15.2 ...  Mit Listen geht dies in Kurzform:
list = [14.2, 13.2, 15.2, ... ]  </description>
    </item>
    
    <item>
      <title>Bilder zeichnen</title>
      <link>https://opencoding.de/python-mit-pygame/03_bilder_zeichnen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python-mit-pygame/03_bilder_zeichnen/</guid>
      <description>Zeichne etwas auf den Bildschirm.
Dazu brauchst du 3 Zeilen Code:
image = pygame.image.load(&amp;quot;[Dateiname].png&amp;quot;)  Diese Zeile lädt das Bild. Achtung: Das Bild muss im selben Verzeichnis wie dein Programm liegen und du musst den Dateinamen entsprechend setzen
screen.blit(image, (50,50))  Diese Zeile blittet das Bild an die Position (50|50) (beachte, dass der Ursprung beim Bildschirm in der oberen Ecke sitzt)
pygame.display.flip()  Diese Zeile sorgt dafür, dass das Display neu geladen wird.</description>
    </item>
    
    <item>
      <title>Funktionen</title>
      <link>https://opencoding.de/python_textadventures/03_funktionen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_textadventures/03_funktionen/</guid>
      <description>Je komplexer unser Programm wird, umso mehr macht es Sinn, Teile in Unterprogramme auszulagern. Dies geht mi elif entscheidung == &amp;ldquo;ende&amp;rdquo;: zustand = &amp;ldquo;Ende&amp;rdquo;t Hilfe von Funktionen.
An dieser Stelle wird eine Funktion Haupteingang geschrieben:
def haupteingang(): easygui.msgbox(&amp;quot;Du stehst am Eingang&amp;quot;) entscheidung = easygui.buttonbox(&amp;quot;Wohin gehst du&amp;quot;, &amp;quot;Mein Textadventure&amp;quot;, [&amp;quot;links&amp;quot;, &amp;quot;rechts&amp;quot;, &amp;quot;ende&amp;quot;]) if entscheidung == &amp;quot;links&amp;quot;: neuer_zustand = &amp;quot;Seiteneingang links&amp;quot; elif entscheidung == &amp;quot;rechts&amp;quot;: neuer_zustand = &amp;quot;Seiteneingang rechts&amp;quot; elif entscheidung == &amp;quot;ende&amp;quot;: zustand = &amp;quot;Ende&amp;quot; return neuer_zustand  Das Unterprogramm trägt den Namen Haupteingang und hat den Parameter entscheidung.</description>
    </item>
    
    <item>
      <title>Matplotlib</title>
      <link>https://opencoding.de/data-science/03_matplotlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/data-science/03_matplotlib/</guid>
      <description>Installiere in Thonny die Bibliothek matplotlib und importiere diese:
import matplotlib as mlp import matplotlib.pyplot as plt  (Das Alias as im Import sagt, dass du die Bibliothek in Zukunft mit mpl aufrufen kannst - So sparst du dir Schreibarbeit)
Jetzt kannst du deinen ersten Plot anzeigen:
plt.plot([1,2,3,4], [1,4,9,16], &#39;bo&#39;) plt.show()   Das erste Argument der Funktion ist eine Liste mit x-Werten
 Das zweite Argument der Funktion ist eine Liste mit y-Werten</description>
    </item>
    
    <item>
      <title>Schleifen</title>
      <link>https://opencoding.de/python_mit_turtle/03_schleifen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/03_schleifen/</guid>
      <description>Lektion 2: Schleifen Aufgabe 2.1: Schleifen Meist ist es nicht sehr effizient die selben Anweisungen mehrfach zu schreiben. Im folgenden Programm siehst du, wie du etwas wiederholen kannst. Die Zeilen 3 und 4 sind eingerückt - dies ist wichtig- um dem Programm mitzuteilen, dass diese Zeilen innerhalb der Schleife wiederholt werden:
import turtle for i in range(4): turtle.forward(100) turtle.right(90)  Grafisch kann man den Programmablauf in einem Flussdiagramm visualisieren:</description>
    </item>
    
    <item>
      <title>Bewegungen</title>
      <link>https://opencoding.de/python-mit-pygame/04_bewegungen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python-mit-pygame/04_bewegungen/</guid>
      <description>Bewegungen kannst du hinzufügen, wenn du die festen Koordinaten, an die du ein Bild geblittet hast, variabel machst:
x = 10 y = 10 stepx = 1 stepy = 1 while running: screen.blit(image, (x, y)) x = x+stepx  Wie du siehst entstehen zwei Probleme:
 Dein Bild hinterlässt eine Spur Dein Bild verschwindet aus dem Bildschirm.  Problem 1. lässt sich lösen, indem man zu Beginn der Mainloop immer erstmal den kompletten Bildschirm löscht:</description>
    </item>
    
    <item>
      <title>Eingaben</title>
      <link>https://opencoding.de/python_mit_turtle/04_eingaben/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/04_eingaben/</guid>
      <description>Lektion 3: Benutzereingaben Aufgabe 3.1 Führe das folgende Programm aus und beobachte, was passiert:
 a) Beschreibe, was das Programm macht
b) Erkläre was die Zeilen 2 und 3 des Programmes tun.
  Lösung anzeigen   In Zeile 2 passieren 3 Dinge in folgender Reihenfolge:
 Eine Benutzereingabe wird mit der Funktion input() eingelesen.
 Die Funktion int() wandelt die Benutzereingabe in eine Zahl um.
 Die umgewandelte Zahl wird gespeichert und ist über den Namen x zugreifbar.</description>
    </item>
    
    <item>
      <title>Weitere Ideen</title>
      <link>https://opencoding.de/python_textadventures/04_weitere_ideen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_textadventures/04_weitere_ideen/</guid>
      <description>Zufall Oft sollen Dinge vom Zufall abhängen. Dies kannst du in Python folgendermaßen machen:
import random print(&amp;quot;Würfle mit einem Würfel&amp;quot;) wuerfel = random.randint(1,6) print(wuerfel)  Überlege dir, wie du mit Hilfe dieser Funktion Zufallszahlen in dein Programm einbauen kann
Inventar - Für fortgeschrittene Wenn es viele mögliche Gegenstände gibt, die ein Charakter mit sich führen kann, dann wird es schnell unübersichtlich, wenn du für jeden Gegenstand eine einzelne Variable hinzufügst.</description>
    </item>
    
    <item>
      <title>Funktionen</title>
      <link>https://opencoding.de/python_mit_turtle/05_funktionen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/05_funktionen/</guid>
      <description>Aufgabe 1 Wenn du größere Programme schreibst, ist es am einfachsten, wenn du diese in Teilprogramme zerlegen kannst.
In Python funktioniert dies mit Funktionen (oder auch Subroutinen). Das folgende Programm erstellt eine Funktion, um ein kleines Quadrat zu zeichnen. Anschließend wird die Funktion einmal aufgerufen:
import turtle def square(): for i in range(4): turtle.forward(30) turtle.right(90) square()   Das Schlüsselworts def steht für define. Mit diesem Schlüsselwort wird signalisiert, dass im folgenden eine Funktion definiert wird.</description>
    </item>
    
    <item>
      <title>Mehr Infos</title>
      <link>https://opencoding.de/python-mit-pygame/05_mehr_infos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python-mit-pygame/05_mehr_infos/</guid>
      <description>Hier findest du ein umfangreicheres Tutorial: https://dr0id.bitbucket.io/legacy/pygame_tutorials.html</description>
    </item>
    
    <item>
      <title>Zufall</title>
      <link>https://opencoding.de/python_mit_turtle/06_zufall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/06_zufall/</guid>
      <description>Aufgabe 1: Zufällige Rechtecke Erstelle ein neues Programm.
Damit wir zufällige Quadrate zeichnen können, benötigen wir die random() Funktion. Wir werden eine zufällige Zahl erstellen und dann dieser Zahl eine Farbe zuweisen.
Betrachte dazu folgendes Programm (Hinweis: Zeilen, die mit # beginnen sind Kommentare, die vom Computer nicht gelesen werden, sondern dazu gedacht sind von Menschen gelesen zu werden):
  if bedeutet: Falls die Bedingung gegeben ist, führe den eingerückten Code aus.</description>
    </item>
    
    <item>
      <title>Zufallsmuster</title>
      <link>https://opencoding.de/python_mit_turtle/07_zufallsmuster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/python_mit_turtle/07_zufallsmuster/</guid>
      <description>Aufgabe 1: Grundsätzliche Überlegungen Das folgende Programm erstellt eine Form:
import turtle def shape(): for i in range(4): turtle.forward(50) turtle.right(90) shape()  Beantworte folgende Fragen, passe das Programm dafür an:
 Wie müsste man das Programm verändern, wenn man eine dreiseitige Figur erstellen möchte?
 Wie müsste man das Programm verändern, wenn man eine fünfseitige Figur erstellen möchte?
 Was ist die Beziehung zwischen Seitenanzahl und Winkel, den die Turtle zeichnen muss.</description>
    </item>
    
    <item>
      <title>Datenschutzerklärung</title>
      <link>https://opencoding.de/datenschutz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencoding.de/datenschutz/</guid>
      <description>Datenschutzerklärung Generelle Informationen Dieses Blog wird bei Uberspace gehostet. Wenn Sie dieses Blog besuchen, werden automatisch einige Daten an den Webserver übertragen und dort gespeichert. Dies ist zur Anzeige dieser Webseite technisch erforderlich und beschränkt sich auf den dafür notwendigen Umfang. Es handelt sich insbesondere um folgende Informationen: die Referrer-URL (die Webseite, von der Sie kommen) / die IP-Adresse des Gerätes, mit dem sie auf den Blog zugreifen / den verwendeten Browser / Uhrzeit und Datum / das verwendete Betriebssystem.</description>
    </item>
    
  </channel>
</rss>