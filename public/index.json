[
{
	"uri": "https://opencoding.de/datenstrukturen-und-algorithmen/01_einfache_sortieralgorithmen/",
	"title": "Einfache Sortieralgorithmen",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://opencoding.de/data-science/01_erste_schritte/",
	"title": "Erste Schritte",
	"tags": [],
	"description": "",
	"content": "In diesem Tutorial werden dir erste Schritte in den Bereich Data-Science gezeigt.\nWir wird gezeigt, wie du Daten in Listen darstellst und wie du diese mit der Bibliothek matplotlib grafisch anzeigst.\n"
},
{
	"uri": "https://opencoding.de/python-mit-pygame/01_erste_schritte/",
	"title": "Erste Schritte",
	"tags": [],
	"description": "",
	"content": " Installation Thonny Installiere über Tools -\u0026gt; Manage Packages die Bibliothek pygame\nErste Schritte Folgender Code erstellt ein Fenster, dass sofort wieder verschwindet:\nimport pygame pygame.init() screen = pygame.display.set_mode((200,100))  Die Mainloop Nun brauchst du eine Mainloop. Ergänze dazu folgenden Code:\nrunning = True while running: for event in pygame.event.get(): if event.type == pygame.QUIT: running = False  Bilder zeichnen Zeichne etwas auf den Bildschirm.\nDazu brauchst du 3 Zeilen Code:\nimage = pygame.image.load(\u0026quot;[Dateiname].png\u0026quot;)  Diese Zeile lädt das Bild. Achtung: Das Bild muss im selben Verzeichnis wie dein Programm liegen und du musst den Dateinamen entsprechend setzen\nscreen.blit(image, (50,50))  Diese Zeile blittet das Bild an die Position (50|50) (beachte, dass der Ursprung beim Bildschirm in der oberen Ecke sitzt)\npygame.display.flip()  Diese Zeile sorgt dafür, dass das Display neu geladen wird. Gegebenfalls musst du dein Bild noch skalieren. Dies geht über folgenden Befehl:\nimage = pygame.transform.scale(image, (20, 20))  So könnte dein Programm aussehen:\nimport pygame pygame.init() screen = pygame.display.set_mode((200,100)) running = True image = pygame.image.load(\u0026quot;smiley.jpg\u0026quot;) image = pygame.transform.scale(image, (20, 20)) screen.blit(image, (50,50)) while running: for event in pygame.event.get(): if event.type == pygame.QUIT: running = False pygame.display.flip()  Transparente Farben Manchmal möchte man, dass eine Farbe transparent gezeichnet wird. Dies geht mit:\nimage.set_colorkey((255,255,255)) # Die Farbe weiß soll transparent sein.  ===== Hintergründe =====\nDen Hintergrund des Bildschirms kannst du folgendermaßen setzen\nscreen.fill((r,g,b))  r,g,b sind jeweils Zahlen zwischen 0 und 256 und die Anteile von red, green und blue in der Farbe. Hier findest du einen Farbwähler: https://www.rapidtables.com/web/color/RGB_Color.html\nDu kannst auch ein Bild als Hintergrund wählen:\nscreen.blit(bgd_image, (0,0))  ===== Bewegungen =====\nBewegungen kannst du hinzufügen, wenn du die festen Koordinaten, an die du ein Bild geblittet hast, variabel machst:\nx = 10 y = 10 stepx = 1 stepy = 1 while running: screen.blit(image, (x, y)) x = x+stepx  Wie du siehst entstehen zwei Probleme:\n Dein Bild hinterlässt eine Spur Dein Bild verschwindet aus dem Bildschirm.  Problem 1. lässt sich lösen, indem man zu Beginn der Mainloop immer erstmal den kompletten Bildschirm löscht:\nwhile running: screen.fill((20, 20, 20)) screen.blit(image, (x, y)) ...  Problem 2 lässt sich lösen, in dem man testet, ob das Bild außerhalb des Sichtbereiches ist.\n if x\u0026gt; screen.get_width() or x\u0026lt;0: stepx = stepx * (-1) x = x+ stepx  Hier findest du ein umfangreicheres Tutorial: https://dr0id.bitbucket.io/legacy/pygame_tutorials.html\n"
},
{
	"uri": "https://opencoding.de/python_textadventures/01_first_steps/",
	"title": "Erste Schritte (Entscheidungen if-then-else)",
	"tags": [],
	"description": "",
	"content": " 1. Die Mainloop Schreibe folgenden Code:\nzustand = \u0026quot;Eingang\u0026quot; while zustand!= \u0026quot;Ende\u0026quot;: pass  Damit hast du eine Endlosschleife und das Grundgerüst für dein späteres Textadventure. Innerhalb dieser Endlosschleife kannst du jetzt Aktionen abfragen.\nDu kannst dein Programm in Thonny mit dem Stop-Icon beenden, sonst läuft es ewig weiter:\n2. Entscheidungen Jetzt wird eine Entscheidung ergänzt:\n1 while zustand != \u0026quot;Ende\u0026quot;: 2 print(\u0026quot;Du stehst an folgendem Ort: \u0026quot; + zustand) 3 entscheidung = input(\u0026quot;In welche Richtung gehst du?\u0026quot;) 4 if zustand == \u0026quot;Eingang\u0026quot;: 5 if entscheidung == \u0026quot;links\u0026quot;: 6 zustand = \u0026quot;Seiteneingang links\u0026quot; 7 elif entscheidung == \u0026quot;rechts\u0026quot;: 8 zustand = \u0026quot;Seiteneingang rechts\u0026quot; 9 if zustand == ...  Verschachtelung: Beachte, dass in Python die Verschachtelung von Entscheidungen eine besondere Rolle spielt. Die if-verzweigung if entscheidung == \u0026ldquo;links\u0026rdquo; wird nur unter der Bedingung ausgeführt, dass der Zustand = \u0026ldquo;Eingang\u0026rdquo; ist.\ngraph LR; A[\"zustand == 'Eingang'?\"] --|Ja| B(entscheidung == 'links'?) A --|Nein| F(\"...Überprüfung des nächsten Zustands...\") B --|Ja| C(\"zustand |Nein| D(\"entscheidung == 'rechts'?\") C -- F D --|Ja| E(\"zustand |Nein| F E -- F F  3. Das Programm beenden Spätestens jetzt macht es auch Sinn, dem Benutzer eine Möglichkeit zu geben, das Programm zu beenden:\nzustand = \u0026quot;Eingang\u0026quot; while zustand != \u0026quot;Ende\u0026quot;: print(\u0026quot;Du stehst an folgendem Ort: \u0026quot; + zustand) entscheidung = input(\u0026quot;In welche Richtung gehst du?\u0026quot;) if zustand == \u0026quot;Eingang\u0026quot;: if entscheidung == \u0026quot;links\u0026quot;: zustand = \u0026quot;Seiteneingang links\u0026quot; elif entscheidung == \u0026quot;rechts\u0026quot;: zustand = \u0026quot;Seiteneingang rechts\u0026quot; elif entscheidung == \u0026quot;ende\u0026quot;: zustand = \u0026quot;Ende\u0026quot;  Geändert wurde folgender Teil:\nelif entscheidung == \u0026quot;ende\u0026quot;: zustand = \u0026quot;Ende\u0026quot;  Der Benutzer kann jetzt auch immer die Option ende eingeben. Am Ende wird in den letzten Zeilen überprüft, ob die Entscheidung des Benutzers \u0026ldquo;ende\u0026rdquo; war. Wenn ja, wird das Programm beendet.\nBeachte, dass du die Funktion zum Beenden an jedem möglichen Ort an dem sich der Spieler aufhalten kann, hinzufügen musst.\n"
},
{
	"uri": "https://opencoding.de/html/01_html_grundgeruest/",
	"title": "HTML Grundgerüst",
	"tags": [],
	"description": "",
	"content": " Arbeitsauftrag Lege eine Datei index.html mit folgendem Inhalt an und schreibe zwischen \u0026lt;body\u0026gt; und \u0026lt;/body\u0026gt; einen kurzen Text. Lasse dir diesen im Browser (oder im repl-Fenster anzeigen.)\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;de\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Titel der Einzelseite\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026quot;style.css\u0026quot; type=\u0026quot;text/css\u0026quot; rel=\u0026quot;stylesheet\u0026quot;\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Hinweis für Windows-Benutzer Wenn du die Endung .html der Datei nicht ändern kannst, musst du die Windows-Option „Bekannte Dateiendungen ausblenden“ deaktivieren.\nMehr Infos über HTML Ein HTML-Dokument ist folgendermaßen aufgebaut:\n Tags, enthalten Inhalte oder andere Tags. Ein Tag wird mit spitzen Klammern beschrieben, z.B. \u0026lt;head\u0026gt;, \u0026lt;html\u0026gt;, \u0026lt;body\u0026gt;. Auf diese Weise beschreiben Tags die Elemente des HTML-Dokuments.  Elemente werden üblicherweise geöffnet mit \u0026lt;tagname\u0026gt; und mit \u0026lt;/tagname\u0026gt; geschlossen. Alles was dazwischen steht, befindet sich innerhalb des Elements.\nVon dieser Regel gibt es einige Ausnahmen. Wenn ein Tag keinen Inhalt hat, dann muss dies auch nicht geschlossen werden. Man kann dies trotzdem durch ein / am Ende des Tags kennzeichnen, z.B. in dem man schreibt: \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;/\u0026gt;.\nAuf diese Weise ergibt sich die Struktur des Dokuments:\nrepl.it Du kannst deine HTML-Datei auch in [repl.it] bearbeiten. Melde dich dazu auf der Plattform an und erstelle ein neues \u0026ldquo;HTML+CSS+JS\u0026rdquo;-repl\nIn diesem Fall musst das HTML Grundgerüst nicht mehr kopieren, sondern kannst das von repl.it vorgegebene Gerüst verwenden.\n"
},
{
	"uri": "https://opencoding.de/impressum/",
	"title": "Impressum",
	"tags": [],
	"description": "",
	"content": "Andreas Siebel\nUsinger Straße 1\n61273 Wehrheim\nKontakt:\nE-Mail: a.siebel@cws-usingen.de\n"
},
{
	"uri": "https://opencoding.de/python_mit_turtle/01_installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " Zunächst musst du Python installieren. Dies geht auf verschiedene Arten:\n Thonny ist eine integrierte Entwicklungsumgebungen für Anfänger. repl.it ist eine Plattform, auf der du in vielen verschiedenen Sprachen programmieren kannst.  In mannchen Schulen ist das Installieren von Anwendungen gesperrt. In diesen Fall musst du Option 2 wählen.\nThonny Installiere Thonny auf deinem Rechner-. Manchmal kann Thonny auf den Rechnern ohne vollen Zugriff nicht installiert werden, da der Installationsdialog kein Verzeichnis anbietet. Entpacke dir in diesem Fall diese Datei in einen Ordner auf deinem USB Stick:\nrepl.it  Registriere dich auf repl.it Starte ein neues repl mit \u0026ldquo;Python with turtle\u0026rdquo;.  Noch schneller geht es auch so: Du kannst deinen Code direkt in folgendem Fester schreiben:\n trinket.io Wenn gar nichts geht: Gehe auf https://trinket.io/python3 um eine Online-IDE zu starten. Achtung: Damit sich hier das Fenster nicht automatisch direkt nach Ausführung schließt, musst du immer die letzte Zeile ergänzen: turtle.mainloop()\n"
},
{
	"uri": "https://opencoding.de/python_mit_turtle/00_operationen/",
	"title": "Operationen",
	"tags": [],
	"description": "",
	"content": "Du benötigst folgende Operationen. Kehre hierhin zurück, wenn du vergessen hast, wie du die turtle steuern kannst.\n   Befehl Beschreibung     turtle.forward() Gehe vorwärts   turtle.backward() Gehe rückwärts   turtle.right(x) Drehe dich um x Grad nach rechts   turtle.left(x) Drehe dich um x Grad nach links   turtle.penup() Hebe den Stift an (Bewege dich weiter, ohne zu zeichnen)   turtle.pendown() Setzt den Stift wieder ab, so dass du weiterzeichnest   turtle.fillcolor(\u0026ldquo;brown\u0026rdquo;) Ändert die Füllfarbe auf Braun   turtle.pencolor(\u0026ldquo;red\u0026rdquo;) Ändert die Stiftfarbe auf rot   turtle.begin_fill() Beginnt die Figur zu füllen   turtle.end_fill() Beendet das Füllen    Weitere Operationen findest du hier:\n"
},
{
	"uri": "https://opencoding.de/python_mit_turtle/02_basics/",
	"title": "Python Basics",
	"tags": [],
	"description": "",
	"content": " Grundlagen Ein erster Code kann folgendermaßen aussehen:\n Aufgabe 1.1: Zeichne ein Quadrat mit roter Stiftfarbe Zeichne ein Quadrat mit roter Stiftfarbe wie im folgenden Beispiel:\n  Lösung anzeigen   import turtle turtle.fillcolor(“Brown”) turtle.begin_fill() turtle.pencolor(“Red”) turtle.forward (100) turtle.right (90) turtle.forward (100) turtle.right (90) turtle.forward (100) turtle.right (90) turtle.forward (100) turtle.end_fill()    Aufgabe 1.2: Zeichne ein Quadrat (2) Zeichne ein Quadrat mit den Seitenlängen 180 mit einer lila (\u0026ldquo;purple\u0026rdquo;) Linie und blauer (\u0026ldquo;blue) Füllung.\n  --\u0026gt; Lösung anzeigen   import turtle turtle.pencolor(\u0026quot;purple\u0026quot;) turtle.fillcolor(\u0026quot;blue\u0026quot;) turtle.begin_fill() turtle.forward (180) turtle.right (90) turtle.forward (180) turtle.right (90) turtle.forward (180) turtle.right (90) turtle.forward (180) turtle.end_fill()    Aufgabe 1.3: Zeichne ein Rechteck Zeichne ein Rechteck:\n  --\u0026gt; Lösung anzeigen   import turtle turtle.forward (150) turtle.right (90) turtle.forward (80) turtle.right (90) turtle.forward (150) turtle.right (90) turtle.forward (80)    Aufgabe 1.4: Zeichne zwei Rechtecke Ergänze Aufgabe 4 um ein zweites Rechteck, dass angezeigt werden soll. Die Rechtecke sollen sich nicht berühren. Verwende dafür die Funktionen penup \u0026amp; pendown (siehe oben).\n  Lösung anzeigen   import turtle # Erstes Rechteck turtle.forward (150) turtle.right (90) turtle.forward (80) turtle.right (90) turtle.forward (150) turtle.right (90) turtle.forward (80) # Stift anheben und weiterbewegen turtle.penup() turtle.forward(20) turtle.pendown() # Zweites Rechteck turtle.forward (80) turtle.right (90) turtle.forward (150) turtle.right (90) turtle.forward (80) turtle.right (90) turtle.forward (150)    Aufgabe 1.6: Zeichne ein Dreieck Zeichne ein Dreieck\n  Lösung anzeigen   import turtle import turtle turtle.forward (150) turtle.right (120) turtle.forward (150) turtle.right (120) turtle.forward (150) turtle.right (120)    Aufgabe 1.7: Zeichne Figuren Zeichne mindestens zwei der folgenden Figuren:\n Regelmäßiges Fünfeck Regelmäßíges Sechseck Regelmäßiges Achteck Regelmäßiges Zwölfeck  "
},
{
	"uri": "https://opencoding.de/python_mit_turtle/",
	"title": "Python mit Turtlegrafik",
	"tags": [],
	"description": "",
	"content": " Python mit Turtlegrafik In diesem Tutorial lernst du, wie du mit Hilfe von Turtle-Grafik mit Python Algorithmen erstellen kannst.\nLizenz Die Übungen basieren auf Arbeitsblättern von James Watts https://community.computingatschool.org.uk/resources/2851/single .\nDas komplette Tutorial steht unter Creative Commons by-sa 3.0-Lizenz.\n"
},
{
	"uri": "https://opencoding.de/python-mit-pygame/02_mainloop/",
	"title": "Die Mainloop",
	"tags": [],
	"description": "",
	"content": "Nun brauchst du eine Mainloop, d.h. eine Schleife die ständig läuft, bis die Zustandsvariable running den Wert False annimmt (z.B. wenn der Benutzer auf das x-Symbol des Fensters klickt.)\nErgänze dazu folgenden Code:\nrunning = True while running: for event in pygame.event.get(): if event.type == pygame.QUIT: running = False  "
},
{
	"uri": "https://opencoding.de/python_textadventures/02_easygui/",
	"title": "Easygui",
	"tags": [],
	"description": "",
	"content": " Eine grafische Benutzeroberfläche Installation Thonny: Installiere zunächst das Package Easy-Gui\n Wähle dazu in Thonny das Menü: \u0026ldquo;Tools\u0026rdquo; -\u0026gt; \u0026ldquo;Manage Packages\u0026rdquo;\n Suche nach EasyGui und klicke auf install.\n  repl.it In repl.it werden Pakete automatisch installiert, wenn du sie mit der import-Anweisung importierst.\nErste Schritte Jetzt kannst du folgendermaßen EasyGui Dialoge einbinden.\nimport easygui zustand = \u0026quot;Eingang\u0026quot; while zustand != \u0026quot;Ende\u0026quot;: easygui.msgbox(\u0026quot;Du stehst an folgendem Ort: \u0026quot; + zustand, \u0026quot;Mein Textadventure\u0026quot;) entscheidung = easygui.buttonbox(\u0026quot;Wohin gehst du\u0026quot;, \u0026quot;Mein Textadventure\u0026quot;, [\u0026quot;links\u0026quot;, \u0026quot;rechts\u0026quot;]) if zustand == \u0026quot;Eingang\u0026quot;: if entscheidung == \u0026quot;links\u0026quot;: zustand = \u0026quot;Seiteneingang links\u0026quot; elif entscheidung == \u0026quot;rechts\u0026quot;: zustand = \u0026quot;Seiteneingang rechts\u0026quot; elif entscheidung == \u0026quot;ende\u0026quot;: zustand = \u0026quot;Ende\u0026quot;  In den Zeilen 4 und 5 wurden jeweils die Dialoge durch Gui Elemente ersetzt.\n"
},
{
	"uri": "https://opencoding.de/data-science/02_listen/",
	"title": "Listen",
	"tags": [],
	"description": "",
	"content": "Oft will man mehrere Daten in Folge speichern, z.B. die Temperaturdaten eines Monats. Dann ist es aber unpraktisch, für jede Information eine eigene Variable einzuführen.\nOhne Listen müsstest du jeden Wert in einer einzelnen Variable speichern:\nd1 = 14.2 d2 = 13.2 d3 = 15.2 ...  Mit Listen geht dies in Kurzform:\nlist = [14.2, 13.2, 15.2, ... ]  "
},
{
	"uri": "https://opencoding.de/python_textadventures/",
	"title": "Python - Textadventures",
	"tags": [],
	"description": "",
	"content": " Python Textadventures In diesem Tutorial lernst du, wie du mit Python einfache Textadventures erstellen kannst.\n"
},
{
	"uri": "https://opencoding.de/datenstrukturen-und-algorithmen/02_rekursion/",
	"title": "Rekursion",
	"tags": [],
	"description": "",
	"content": " Was ist Rekursion? Beschreiben sie anhand folgender Beispiele, was Rekursion bedeutet\n1. Kunst Beschreiben Sie, was die Bilder gemeinsam haben. Wie entstehen die Bilder?\nMandelbrot-Menge: Sirpinski Dreieck: 2. Treppenstufen Suche für folgende Aufgabe eine Treppe. Berechnen, wie viele unterschiedliche Möglichkeiten es nach folgenden Regeln gibt, wie man eine bestimmte Stufe erreichen kann.\n Du beginnst auf Treppenstufe 0 Du musst Stufe 1 betreten. Wenn man nicht auf der 0. Stufe steht, kannst du immer entweder auf die nächste oder auch auf die übernächste Stufe steigen.  Beispiel:  Es gibt zwei Möglichkeiten, Stufe 3 zu erreichen.\n"
},
{
	"uri": "https://opencoding.de/html/02_tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": " Arbeitsauftrag Schreibe jetzt erste Inhalte zwischen \u0026lt;body\u0026gt;und \u0026lt;/body\u0026gt; und gestalte die Inhalte mit Tags.\nSyntax Verwende dabei folgende Tags:\n\u0026lt;h1\u0026gt; Überschrift Ebene 1 \u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt; Überschrift Ebene 2 \u0026lt;/h2\u0026gt; ... \u0026lt;h3\u0026gt; Überschrift Ebene 3 \u0026lt;/h3\u0026gt; Ein Zeilen\u0026lt;br/\u0026gt; umbruch \u0026lt;p\u0026gt; Umschließe Absätze mit p Tags \u0026lt;/p\u0026gt; \u0026lt;b\u0026gt;fett\u0026lt;/b\u0026gt; \u0026lt;i\u0026gt;kursiv\u0026lt;/i\u0026gt; \u0026lt;u\u0026gt;Unterstrichen\u0026lt;/u\u0026gt; \u0026lt;!--Kommentar Kommentare werden nicht im Dokument angezeigt. Sie dienen dir beim Schreiben als Hilfe--\u0026gt;  Mehr Infos über Tags  Mehr Tags findest du hier: https://www.html-seminar.de/befehlsuebersicht.htm\n Auf der Seite https://wiki.selfhtml.org findest du alle Informationen über HTML und CSS.\n Links, Listen, Tabellen und Bereiche (\u0026lt;div\u0026gt;) werden auf den folgenden Seiten beschrieben.\n Es ist noch nicht notwendig, Farben und ähnliches zu definieren. Das Layout eines Dokumentes werden wir später mit Layout-Dateien (css) festlegen. Siehe dazu auch Trennung von Layout und Inhalt\n  "
},
{
	"uri": "https://opencoding.de/html/03_attribute/",
	"title": "Attribute",
	"tags": [],
	"description": "",
	"content": " Arbeitsauftrag Einige Tags können durch zusätzliche Informationen innerhalb des Tags ergänzt werden. Man nennt diese Informationen Attribute. Füge in deinem Dokument zu einem oder mehreren Tags geeignete Attribute hinzu.\nSyntax \u0026lt;p align=\u0026quot;right\u0026quot;\u0026gt;Inhalt\u0026lt;/p\u0026gt;  Dies ordnet den Inhalt rechtsbündig an (Alternativen: right | left | center)\nMehr über Attribute  Hier findest du viele weitere Attribute: https://developer.mozilla.org/de/docs/Web/HTML/Attributes\n Es ist zwar möglich mit Attributen dein Dokument zu layouten (z.B. über color, bgcolor, width, height, …). Wir werden dies aber über spezielle Layout-Dateien (css) machen. Beachte immer das wichtige Grundprinzip: Trennung von Layout und Inhalt\n Wichtig für das Layout sind später die Attribute class und id. Mit diesen Attributen können Teile deines Dokuments identifiziert werden.\n  "
},
{
	"uri": "https://opencoding.de/python-mit-pygame/03_bilder_zeichnen/",
	"title": "Bilder zeichnen",
	"tags": [],
	"description": "",
	"content": " Zeichne etwas auf den Bildschirm.\nDazu brauchst du 3 Zeilen Code:\nimage = pygame.image.load(\u0026quot;[Dateiname].png\u0026quot;)  Diese Zeile lädt das Bild. Achtung: Das Bild muss im selben Verzeichnis wie dein Programm liegen und du musst den Dateinamen entsprechend setzen\nscreen.blit(image, (50,50))  Diese Zeile blittet das Bild an die Position (50|50) (beachte, dass der Ursprung beim Bildschirm in der oberen Ecke sitzt)\npygame.display.flip()  Diese Zeile sorgt dafür, dass das Display neu geladen wird. Gegebenfalls musst du dein Bild noch skalieren. Dies geht über folgenden Befehl:\nimage = pygame.transform.scale(image, (20, 20))  So könnte dein Programm aussehen:\nimport pygame pygame.init() screen = pygame.display.set_mode((200,100)) running = True image = pygame.image.load(\u0026quot;smiley.jpg\u0026quot;) image = pygame.transform.scale(image, (20, 20)) screen.blit(image, (50,50)) while running: for event in pygame.event.get(): if event.type == pygame.QUIT: running = False pygame.display.flip()  Transparente Farben Manchmal möchte man, dass eine Farbe transparent gezeichnet wird. Dies geht mit:\nimage.set_colorkey((255,255,255)) # Die Farbe weiß soll transparent sein.  Hintergründe Den Hintergrund des Bildschirms kannst du folgendermaßen setzen\nscreen.fill((r,g,b))  r,g,b sind jeweils Zahlen zwischen 0 und 256 und die Anteile von red, green und blue in der Farbe. Hier findest du einen Farbwähler: https://www.rapidtables.com/web/color/RGB_Color.html\nDu kannst auch ein Bild als Hintergrund wählen:\nscreen.blit(bgd_image, (0,0))  "
},
{
	"uri": "https://opencoding.de/python-mit-pygame/",
	"title": "Computergrafik mit Pygame",
	"tags": [],
	"description": "",
	"content": " Computergrafik mit Pygame In diesem Tutorial lernst du, wie du mit Python und Pygame zeichnen und Animationen erstellen kannst.\n"
},
{
	"uri": "https://opencoding.de/python_textadventures/03_funktionen/",
	"title": "Funktionen",
	"tags": [],
	"description": "",
	"content": "Je komplexer unser Programm wird, umso mehr macht es Sinn, Teile in Unterprogramme auszulagern. Dies geht mi elif entscheidung == \u0026ldquo;ende\u0026rdquo;: zustand = \u0026ldquo;Ende\u0026rdquo;t Hilfe von Funktionen.\nAn dieser Stelle wird eine Funktion Haupteingang geschrieben:\ndef haupteingang(): easygui.msgbox(\u0026quot;Du stehst am Eingang\u0026quot;) entscheidung = easygui.buttonbox(\u0026quot;Wohin gehst du\u0026quot;, \u0026quot;Mein Textadventure\u0026quot;, [\u0026quot;links\u0026quot;, \u0026quot;rechts\u0026quot;, \u0026quot;ende\u0026quot;]) if entscheidung == \u0026quot;links\u0026quot;: neuer_zustand = \u0026quot;Seiteneingang links\u0026quot; elif entscheidung == \u0026quot;rechts\u0026quot;: neuer_zustand = \u0026quot;Seiteneingang rechts\u0026quot; elif entscheidung == \u0026quot;ende\u0026quot;: zustand = \u0026quot;Ende\u0026quot; return neuer_zustand  Das Unterprogramm trägt den Namen Haupteingang und hat den Parameter entscheidung. Abhängig von dem, was als Wert für entscheidung übergeben wird, gibt das Unterprogramm einen anderen Wert zurück.\nIm Hauptprogramm können wir nun folgendermaßen auf das Unterprogramm zugreifen:\nimport easygui def haupteingang(): easygui.msgbox(\u0026quot;Du stehst am Eingang\u0026quot;) entscheidung = easygui.buttonbox(\u0026quot;Wohin gehst du\u0026quot;, \u0026quot;Mein Textadventure\u0026quot;, [\u0026quot;links\u0026quot;, \u0026quot;rechts\u0026quot;, \u0026quot;ende\u0026quot;]) if entscheidung == \u0026quot;links\u0026quot;: neuer_zustand = \u0026quot;Seiteneingang links\u0026quot; elif entscheidung == \u0026quot;rechts\u0026quot;: neuer_zustand = \u0026quot;Seiteneingang rechts\u0026quot; elif entscheidung == \u0026quot;ende\u0026quot;: zustand = \u0026quot;Ende\u0026quot; return neuer_zustand zustand = \u0026quot;Eingang\u0026quot; while zustand != \u0026quot;Ende\u0026quot;: if zustand == \u0026quot;Eingang\u0026quot;: zustand = haupteingang()  Auf diese Weise können wir weitere Unterprogramme hinzufügen:\nAuf diese Weise wird dein Code besser lesbar, da du einzelne Teile in die entsprechenden Unterprogramme auslagern kannst.\n"
},
{
	"uri": "https://opencoding.de/data-science/03_matplotlib/",
	"title": "Matplotlib",
	"tags": [],
	"description": "",
	"content": " Installiere in Thonny die Bibliothek matplotlib und importiere diese:\nimport matplotlib as mlp import matplotlib.pyplot as plt  (Das Alias as im Import sagt, dass du die Bibliothek in Zukunft mit mpl aufrufen kannst - So sparst du dir Schreibarbeit)\nJetzt kannst du deinen ersten Plot anzeigen:\nplt.plot([1,2,3,4], [1,4,9,16], 'bo') plt.show()   Das erste Argument der Funktion ist eine Liste mit x-Werten\n Das zweite Argument der Funktion ist eine Liste mit y-Werten\n Das dritte Argument ist ein Format-String, der dir es leicht erlaubt, das Aussehen des Plots zu verwenden. Dieser besteht aus mehreren Teilen.\n  Farbe ^ Buchstabe ^ Farbe ^ | \u0026lsquo;b\u0026rsquo; | blue | | \u0026lsquo;g\u0026rsquo; | green | | \u0026lsquo;r\u0026rsquo; | red | | \u0026lsquo;c\u0026rsquo; | cyan | | \u0026rsquo;m\u0026rsquo; | magenta | | \u0026lsquo;y\u0026rsquo; | yellow | | \u0026lsquo;k\u0026rsquo; | black | | \u0026lsquo;w\u0026rsquo; | white | | | |\nMarkierung ^ Buchstabe ^ Markierung ^ | \u0026lsquo;.\u0026rsquo; | point marker | | \u0026lsquo;,\u0026rsquo; | pixel marker | | \u0026lsquo;o\u0026rsquo; | circle marker | | \u0026lsquo;v\u0026rsquo; | triangle_down marker | | \u0026lsquo;%%^%%\u0026rsquo; | triangle_up marker | | \u0026lsquo;%%\u0026lt;%%\u0026rsquo; | triangle_left marker | | \u0026lsquo;%%\u0026gt;%%\u0026rsquo; | triangle_right marker | | \u0026lsquo;1\u0026rsquo; | tri_down marker | | \u0026lsquo;2\u0026rsquo; | tri_up marker | | \u0026lsquo;3\u0026rsquo; | tri_left marker | | \u0026lsquo;4\u0026rsquo; | tri_right marker | | \u0026rsquo;s\u0026rsquo; | square marker | | \u0026lsquo;p\u0026rsquo; | pentagon marker | | \u0026lsquo;*\u0026rsquo; | star marker | | \u0026lsquo;h\u0026rsquo; | hexagon1 marker | | \u0026lsquo;H\u0026rsquo; | hexagon2 marker | | \u0026lsquo;+\u0026rsquo; | plus marker | | \u0026lsquo;x\u0026rsquo; | x marker | | \u0026rsquo;D\u0026rsquo; | diamond marker | | \u0026rsquo;d\u0026rsquo; | thindiamond marker | | \u0026lsquo;%%|%%\u0026rsquo; | vline marker | | \u0026lsquo;\u0026rsquo; | hline marker |\nLinien ^ Buchstabe ^ Linie ^ | \u0026lsquo;-\u0026rsquo; | solid line style | | \u0026lsquo;\u0026ndash;\u0026rsquo; | dashed line style | | \u0026lsquo;-.\u0026rsquo; | dash-dot line style | | \u0026lsquo;:\u0026rsquo; | dotted line style |\n"
},
{
	"uri": "https://opencoding.de/python_mit_turtle/03_schleifen/",
	"title": "Schleifen",
	"tags": [],
	"description": "",
	"content": " Lektion 2: Schleifen Aufgabe 2.1: Schleifen Meist ist es nicht sehr effizient die selben Anweisungen mehrfach zu schreiben. Im folgenden Programm siehst du, wie du etwas wiederholen kannst. Die Zeilen 3 und 4 sind eingerückt - dies ist wichtig- um dem Programm mitzuteilen, dass diese Zeilen innerhalb der Schleife wiederholt werden:\nimport turtle for i in range(4): turtle.forward(100) turtle.right(90)  Grafisch kann man den Programmablauf in einem Flussdiagramm visualisieren:\ngraph LR; A[\"Start\"] -- B(\"turtle.forward(100)\") B -- C(\"turtle.right(90)\") C -- D(\"Schleife beendet?\") D --|Nein| A D --|Ja| E[\"Ende\"] E  Aufgabe 2.2: Code analysieren Schau dir folgendes Programm an und überlege was es tut. Zeichne das Ergebnis auf ein Blatt Papier\nFolgende Fragen helfen dir bei der Analyse.\n Wann zeichnet die Turtle, wann zeichnet sie nicht?\n Welche Zeilen werden wiederholt, welche Zeilen werden nicht wiederholt?\n  Führe nach deiner Analyse den Code aus, um dich selbst zu überprüfen.\n \u0026ndash;\u0026gt; Lösung anzeigen\nimport turtle import turtle turtle.penup() turtle.backward(300) turtle.pendown() for i in range(4): turtle.forward(100) turtle.right(90) turtle.penup() turtle.forward(150) turtle.pendown() for i in range(4): turtle.forward(100) turtle.right(90)  \nAufgabe 2.3: Quadrate Zeichne das folgende Muster. Verwende für das Muster (So wie für alle folgenden Muster) Schleifen um möglichst wenige Befehle zu verwenden.\nAufgabe 2.4: Pentagramm Zeichne folgendes Muster\nAufgabe 2.5: Pentagramme Zeichne folgendes Muster\nAufgabe 2.6: Stern Zeichne folgendes Muster\nAufgabe 2.7: Größer werdende Rechtecke Zeichne folgendes Muster\n"
},
{
	"uri": "https://opencoding.de/datenstrukturen-und-algorithmen/",
	"title": "Algorithmik",
	"tags": [],
	"description": "",
	"content": " Datenstrukturen und Algorithmen Aufgabensammlung Datenstrukturen und Algorithmen\nLizenz: CC-BY 4.0\n"
},
{
	"uri": "https://opencoding.de/python-mit-pygame/04_bewegungen/",
	"title": "Bewegungen",
	"tags": [],
	"description": "",
	"content": "Bewegungen kannst du hinzufügen, wenn du die festen Koordinaten, an die du ein Bild geblittet hast, variabel machst:\nx = 10 y = 10 stepx = 1 stepy = 1 while running: screen.blit(image, (x, y)) x = x+stepx  Wie du siehst entstehen zwei Probleme:\n Dein Bild hinterlässt eine Spur Dein Bild verschwindet aus dem Bildschirm.  Problem 1. lässt sich lösen, indem man zu Beginn der Mainloop immer erstmal den kompletten Bildschirm löscht:\nwhile running: screen.fill((20, 20, 20)) screen.blit(image, (x, y)) ...  Problem 2 lässt sich lösen, in dem man testet, ob das Bild außerhalb des Sichtbereiches ist.\n if x\u0026gt; screen.get_width() or x\u0026lt;0: stepx = stepx * (-1) x = x+ stepx  "
},
{
	"uri": "https://opencoding.de/data-science/",
	"title": "Data Science",
	"tags": [],
	"description": "",
	"content": " Data Science Listen + Matplotlib\n"
},
{
	"uri": "https://opencoding.de/python_mit_turtle/04_eingaben/",
	"title": "Eingaben",
	"tags": [],
	"description": "",
	"content": " Lektion 3: Benutzereingaben Aufgabe 3.1 Führe das folgende Programm aus und beobachte, was passiert:\n a) Beschreibe, was das Programm macht\nb) Erkläre was die Zeilen 2 und 3 des Programmes tun.\n  Lösung anzeigen   In Zeile 2 passieren 3 Dinge in folgender Reihenfolge:\n Eine Benutzereingabe wird mit der Funktion input() eingelesen.\n Die Funktion int() wandelt die Benutzereingabe in eine Zahl um.\n Die umgewandelte Zahl wird gespeichert und ist über den Namen x zugreifbar.\n    Aufgabe 3.2: Stiftfarbe Ändere das Programm so, dass es fragt, was für eine Stiftfarbe du verwenden möchtest.\nHinweis: Du benötigst nicht die int() Funktion\nAufgabe 3.3: n-Ecke Als nächstes geht es darum Figuren zu zeichnen.\na) Überlege dir zunächst um welchen Winkel sich die Turtle drehen muss:\n   Anzahl Seiten Winkel     2    3    4    6    8    \u0026hellip;    n     b) Wie kannst du den Winkel berechnen, wenn du die Anzahl der Seiten kennst.\nc) Ergänze die folgende Gleichung (welche den Winkel abhängig von der Anzahl der Seiten berechnen soll:\nwinkel =\nAufgabe 3.4: n-Ecke zeichnen Ändere dein Programm (aus 3.1) so ab, dass eine Figur mit so vielen Seiten gezeichnet wird, wie der Benutzer eingibt.\nAufgabe 5: Challenge Schreibe ein Programm, dass die folgende Figur zeichnet. Dies ist mit nur wenigen Zeilen Code möglich.\n"
},
{
	"uri": "https://opencoding.de/html/04_hyperlinks/",
	"title": "Hyperlinks",
	"tags": [],
	"description": "",
	"content": " Arbeitsauftrag Erstelle in deinem Dokument einen Hyperlink zu \u0026hellip;\n Einer fremden Webseite Einer anderen HTML-Datei im selben Ordner, die du selbst angelegt hast. Einer Datei in einem Unterordner deiner HTML-Datei  Syntax Ein Hyperlink wird folgender Syntax erstellt:\n\u0026lt;a href=“[Url]“\u0026gt;Name des Links\u0026lt;/a\u0026gt;  Die [URL] kann dabei sowohl auf eine andere Webseite verweisen als auch auf eine Datei relativ zum eigenen Pfad.\nBeispiele:\n\u0026lt;a href=“http://www.cws-usingen.de“\u0026gt;CWS Usingen\u0026lt;/a\u0026gt; \u0026lt;a href=“impressum.html“\u0026gt;Impressum\u0026lt;/a\u0026gt; \u0026lt;a href=“unterordner/impressum.html“\u0026gt;Impressum\u0026lt;/a\u0026gt;  Theorie Hyperlinks Angenommen du hast eine Datei c:\\mein-ordner\\index.html. Du kannst die html-Datei bearbeiten, indem du einen Link erstellst in der Form:\n\u0026lt;a href=“c:\\mein-ordner\\index.html“\u0026gt;Mein Link\u0026lt;/a\u0026gt;  Das Problem dabei ist folgendes: Wenn du die Datei auf den Server kopierst, liegt sie dort in einem anderen Pfad und der Link funktioniert dort nicht mehr.\nDaher verwendet man bei der HTML-Programmierung fast immer Pfade, die relativ zur aktuellen Position liegen.\n•Mit unterordner/datei.html kannst du auf Dateien in Unterordnern zugreifen.\n•Mit ../datei.html kannst du auf Dateien in übergeordneten Ordnern zugreifen\n•Mit ../nachbar/datei.html kannst du auf Dateien zugreifen, die auf einem Ordner auf gleicher Ebene liegen.\nInterne Links in repl.it In repl.it kannst du Dateien mit Drag \u0026amp; Drop hinzufügen. Ziehe dazu eine Datei von deinem Desktop in den linken Bereich deines repls, bis sich der Mauszeiger verändert.\nAnschließend kannst du auf die Datei verlinken.\n"
},
{
	"uri": "https://opencoding.de/python_textadventures/04_weitere_ideen/",
	"title": "Weitere Ideen",
	"tags": [],
	"description": "",
	"content": " Zufall Oft sollen Dinge vom Zufall abhängen. Dies kannst du in Python folgendermaßen machen:\nimport random print(\u0026quot;Würfle mit einem Würfel\u0026quot;) wuerfel = random.randint(1,6) print(wuerfel)  Überlege dir, wie du mit Hilfe dieser Funktion Zufallszahlen in dein Programm einbauen kann\nInventar - Für fortgeschrittene Wenn es viele mögliche Gegenstände gibt, die ein Charakter mit sich führen kann, dann wird es schnell unübersichtlich, wenn du für jeden Gegenstand eine einzelne Variable hinzufügst.\nDafür gibt es in Python Listen:\ninventar = []  erstellt eine neue Liste\ninventar.append(\u0026quot;Schlüssel\u0026quot;)  fügt einen Schlüssel zum Inventar hinzu.\ninventar.remove(\u0026quot;Schlüssel\u0026quot;)  löscht den Schlüssel aus dem Inventar.\nMit folgender Anweisung\nif \u0026quot;Schluessel\u0026quot; in inventar: ...  kannst du überprüfen, ob ein Charakter den Gegenstand mit sich führt.\nInventar an Funktionen übergeben Die Inventar-Variablen muss irgendwo im Hauptprogramm definiert werden. Damit die Variable auch in den Unterprogrammen bekannt ist, muss sie als Parameter übergeben werden.\ninventar = [] zustand = \u0026quot;Anfang\u0026quot; .... def tue_irgendetwas(inventar) if \u0026quot;Gegenstand\u0026quot; in inventar: inventar.append(\u0026quot;neuer Gegenstand\u0026quot;) # Hier kommt das Hauptprogramm while zustand != Ende tue_irgendetwas(inventar)  "
},
{
	"uri": "https://opencoding.de/html/05_bilder/",
	"title": "Bilder",
	"tags": [],
	"description": "",
	"content": " Arbeitsauftrag Füge ein Bild in dein Dokument ein. Achte dabei auf das Urheberrecht.\nSyntax Bilder werden mit dem img-Tag eingebunden:\n\u0026lt;img src=“pfad zum element“ alt=“Alternative Beschreibung“ height=“40“ width=“20“/\u0026gt;   Das img-Attribut hat keinen Inhalt. Daher schreibt man üblicherweise am Ende des Tags /\u0026gt; was bedeutet, dass das Tag direkt nach dem öffnen wieder geschlossen wird.\n Das src-Attribut funktioniert genauso wie das href-Attribut bei Links. Man kann genauso Dateien relativ zum aktuellen Pfad oder absolut verlinken.\n Man sollte immer ein alt-attribut angeben. Dies dient der Barrierefreiheit: So wird Blinden die das Bild nicht sehen können die alternative Beschreibung angezeigt.\n width und height kann man angeben. Besser ist es jedoch, diese mit css festzulegen. width und height können auch prozentual (zum Vater-Element) angegeben werden.\n  Bilder und Urheberrecht Beachte bei Bildern immer das Urheberrecht:\n Eigene Bilder kannst du beliebig verwenden. Wenn du bei einem Bild keine Lizenzinformationen verwendest, so darfst du das Bild nur auf Nachfrage verwenden. Ansonsten gelten die Regeln der entsprechenden Lizenzen (z.B. Creative Commons. ). Hier findest du Bilder:  https://ccsearch.creativecommons.org/ https://pixabay.com/de/   Mehr Infos über Bilder  Mehr Infos: https://wiki.selfhtml.org/wiki/HTML/Multimedia_und_Grafiken/Grafiken\n Zum Einbinden von Videos und kann man das Video verwenden: https://wiki.selfhtml.org/wiki/HTML/Multimedia_und_Grafiken/video\n  Bilder in repl.it In repl.it kannst du Bilder mit Drag \u0026amp; Drop hinzufügen. Ziehe dazu eine Datei von deinem Desktop in den linken Bereich deines repls, bis sich der Mauszeiger verändert.\nAnschließend kannst du auf das Bild so wie oben beschrieben verlinken.\n"
},
{
	"uri": "https://opencoding.de/python_mit_turtle/05_funktionen/",
	"title": "Funktionen",
	"tags": [],
	"description": "",
	"content": " Aufgabe 1 Wenn du größere Programme schreibst, ist es am einfachsten, wenn du diese in Teilprogramme zerlegen kannst.\nIn Python funktioniert dies mit Funktionen (oder auch Subroutinen). Das folgende Programm erstellt eine Funktion, um ein kleines Quadrat zu zeichnen. Anschließend wird die Funktion einmal aufgerufen:\nimport turtle def square(): for i in range(4): turtle.forward(30) turtle.right(90) square()   Das Schlüsselworts def steht für define. Mit diesem Schlüsselwort wird signalisiert, dass im folgenden eine Funktion definiert wird.\n Anschließend folgt der Name der Funktion. Diese Funktion heißt square, denn es soll ein Quadrat gezeichnet werden. Nach dem Funktionsnamen folgen zwei Klammern und ein Doppelpunkt.\n Der Inhalt der Funktion ist eingerückt. Hier wird beschrieben, was bei Aufruf der Funktion passieren soll.\n  Um die Funktion aufzurufen schreibt man den Namen der Funktion gefolgt von den beiden Klammern im Programm auf.\nAufgabe:\nFühre das oben beschriebene Programm aus und schaue was passiert.\nAufgabe 2 Erstelle selbst eine eigene Funktion:\n Nenne sie nextshape Die Funktion soll folgendes tun:  Hebe den Stift an. Bewege dich um 60 vorwärts. Senke den Stift.   Schreibe ein Programm, dass mit Hilfe der Funktion 3 Quadrate zeichnet:\nHinweis: So funktionieren Funktionsaufrufe\nsquare() nextshape() square() nextshape() square()   \u0026ndash;\u0026gt; Lösung anzeigen\nimport turtle def square(): for i in range(4): turtle.forward(30) turtle.right(90) def nextshape(): turtle.penup() turtle.forward(60) turtle.pendown() square() nextshape() square() nextshape() square()  \nExkurs: Namen bekannt machen In jeder Programmiersprache müssen Namen zuerst bekannt gemacht werden, bevor sie benutzt werden können. Dies gilt für Variablen aber auch für Funktionen.\nDaher führt folgendes Programm zu einem Fehler\nsquare() def square(): for i in range(4): turtle.forward(30) turtle.right(90)  Python kann die Funktion in Zeile 1 noch nicht aufrufen, da an dieser Stelle der Name der Funktion noch nicht bekannt ist.\nAufgabe 3: 10 Rechtecke Ändere das Programm so ab, dass 10 Rechtecke gezeichnet werden. Verwende dafür eine for-Schleife.\nAufgabe 4: nextrow Erstelle eine Funktion nextrow, die folgendes macht.\n Hebe den Stift an Gehe 600 Schritte rückwärts Bewege dich 60 Schritte nach unten Drehe dich so, dass du nach rechts schaust.  Teste dein Programm, in dem du das Programm aus Aufgabe 3 so erweiterst, dass zwei Reihen mit 6 Rechtecken gezeichnet werden.\nHinweis: Mit folgender Anweisung kannst du die Turtle schneller bewegen:\nturtle.speed(10)  \u0026hellip;oder noch schneller:\nturtle.speed(0)   \u0026ndash;\u0026gt; Lösung anzeigen\nimport turtle def square(): for i in range(4): turtle.forward(30) turtle.right(90) def nextshape(): turtle.penup() turtle.forward(60) turtle.pendown() def nextrow(): turtle.penup() turtle.backward(600) turtle.right(90) turtle.forward(60) turtle.left(90) turtle.pendown() turtle.speed(10) for i in range(10): square() nextshape() nextrow() for i in range(10): square() nextshape()  \u0026lt;/details\nAufgabe 5: Ein Netz aus Quadraten Erweitere das Programm und erstelle ein 10x10 Netz an Rechtecken.\n Erstelle eine Routine gotostart(), die die Turtle 300 nach links und 300 nach oben bewegt, damit das komplette Netz im sichtbaren Bereich gezeichnet wird.\n Verwende eine Schleife um auf die gleiche Weise wie du die 10 Rechtecke gezeichnet hast auch 10 Reihen zu zeichnen. So kann ein Ansatz dafür aussehen:\nfor i in range(10): for j in range(10): ...    \u0026ndash;\u0026gt; Lösung anzeigen\nfor i in range(10): for j in range(10): square() nextshape() nextrow()  \n====== Aufgabe 5: Mehrfarbiges Grid ======\nErstelle ein mehrfarbiges Grid.\n Suche dir dazu zusammen, was du benötigst. Hier findest du eine Übersicht über alle Turtle-Funktionen: https://docs.python.org/3.3/library/turtle.html?highlight=turtle  "
},
{
	"uri": "https://opencoding.de/html/",
	"title": "HTML",
	"tags": [],
	"description": "",
	"content": " HTML Tutorial: HTML, CSS, Bootstrap\nLizenz: CC-BY 4.0\n"
},
{
	"uri": "https://opencoding.de/python-mit-pygame/05_mehr_infos/",
	"title": "Mehr Infos",
	"tags": [],
	"description": "",
	"content": "Hier findest du ein umfangreicheres Tutorial: https://dr0id.bitbucket.io/legacy/pygame_tutorials.html\n"
},
{
	"uri": "https://opencoding.de/html/06_tabellen/",
	"title": "Tabellen",
	"tags": [],
	"description": "",
	"content": " Arbeitsauftrag Füge eine Tabelle in deinem Dokument hinzu.\nSyntax Tabellen können in html mit folgender Syntax erstellt werden:\n\u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Zeile 1 – Spalte 1 \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Zeile 1 – Spalte 2\u0026lt;/td\u0026gt;\u000b\u0026lt;td\u0026gt;Zeile 1 – Spalte 3\u0026lt;/td\u0026gt;\u000b\u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Zeile 2– Spalte 1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Zeile 2 – Spalte 2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Zeile 2 – Spalte 3\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt;  Der Code erzeugt folgende Tabelle:\n  Zeile 1 – Spalte 1  Zeile 1 – Spalte 2\u000bZeile 1 – Spalte 3\u000b  Zeile 2– Spalte 1 Zeile 2 – Spalte 2 Zeile 2 – Spalte 3   Tags  \u0026lt;table\u0026gt; : Das Table-Element umschließt die ganze Tabelle\n \u0026lt;tr\u0026gt;: (Table row): Beschreibt eine neue Zeile\n \u0026lt;td\u0026gt;: (Table data): Beschreibt eine Zelle in einer Tabellenzeile.\n  Formatierung Damit das HTML-Dokumt gut lesbar ist, rückt man die eine Ebene tiefer liegenden HTML-Tags ein. Man verwendet dazu normalerweise nicht die Leertaste sondern die Tab-Taste, da es einfacher ist so gleichmäßig einzurücken.\nWeitere Tags  \u0026lt;th\u0026gt;: Ersetzt tr für die Kopfzeile der Tabelle\n \u0026lt;caption\u0026gt;: Direkt hinter dem -Tag: Fügt eine Tabellenbeschriftung hinzu.\n  Die Attribute Rowspan und Colspan  \u0026lt;td colspan=3\u0026gt;…\u0026lt;/td\u0026gt;: Die Zelle umfasst mehrere Spalten\n \u0026lt;tr rowspan=3\u0026gt;…\u0026lt;/tr\u0026gt;: Die Zelle umfasst mehrere Zeilen.\n  Mehr Infos: https://wiki.selfhtml.org/wiki/HTML/Tabellen/Zellen_verbinden\nMehr Infos über Tabellen Hier findest du mehr Informationen zu Tabellen: https://wiki.selfhtml.org/wiki/HTML/Tabellen\n"
},
{
	"uri": "https://opencoding.de/python_mit_turtle/06_zufall/",
	"title": "Zufall",
	"tags": [],
	"description": "",
	"content": " Aufgabe 1: Zufällige Rechtecke Erstelle ein neues Programm.\nDamit wir zufällige Quadrate zeichnen können, benötigen wir die random() Funktion. Wir werden eine zufällige Zahl erstellen und dann dieser Zahl eine Farbe zuweisen.\nBetrachte dazu folgendes Programm (Hinweis: Zeilen, die mit # beginnen sind Kommentare, die vom Computer nicht gelesen werden, sondern dazu gedacht sind von Menschen gelesen zu werden):\n  if bedeutet: Falls die Bedingung gegeben ist, führe den eingerückten Code aus. elif bedeutet: Falls die If-Bedingung nicht zutrifft, führe den eingerückten Code aus.  Aufgabe Führe das Programm aus und vollziehe nach, was passiert.\nAufgabe 2 Erweitere das Programm so, dass die Rechtecke in einer von 5 Farben deiner Wahl gezeichnet werden.\nAufgabe 3: In Funktion auslagern Der Code zum Auswählen von Farben soll im Programm immer wieder verwendet werden. Daher lagern wir ihn in eine Funktion aus.\nDie Funktion soll folgendes tun:\n Hole dir eine beliebige Zufallszahl Hole dir die Farbe, die zu dieser Zufallszahl passt. Gebe diese Zahl an das Hauptprogramm zurück (dafür verwendet man die return-Anweisung   \u0026ndash;\u0026gt; Lösung anzeigen\nimport random import turtle def getcolour(): colnum = random.randint(1, 2) if colnum == 1: colour = \u0026quot;Red\u0026quot; elif colnum == 2: colour = \u0026quot;Blue\u0026quot; return colour pc = getcolour() turtle.pencolor(pc) for i in range(4): turtle.forward(50) turtle.right(90)  Aufgabe Führe das Programm aus und schaue was passiert.\nAufgabe 3: Erweitere das Programm so, dass das Quadrat mit einer zufälligen Farbe gefüllt wird. (Du benötigst dafür 4 Zeilen Code).\nAufgabe 4: Füge die getcolour() Funktion zu deinem Programm hinzu, in dem du ein Netz aus Rechtecken gezeichnet hast (Verwende dazu Copy \u0026amp; paste, schreibe nicht das ganze Programm ab). Ändere das Programm nun so ab, dass:\n Quadrate in zufälligen Farben gezeichnet werden. Quadrate in zufälligen Farben gefüllt werden.  "
},
{
	"uri": "https://opencoding.de/html/07_listen/",
	"title": "Listen",
	"tags": [],
	"description": "",
	"content": " Arbeitsauftrag Erstelle verschiedene Arten von Listen in deinem Dokument.\nSyntax Listen können ähnlich wie Tabellen erstellt werden:\nSyntax Ungeordnete Listen: \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Unterpunkt 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Unterpunkt 2\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;  \u0026hellip; wird zu:\n Unterpunkt 1 Unterpunkt 2  Nummerierte Listen \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Unterpunkt 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Unterpunkt 2\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt;  \u0026hellip; wird zu:\n Unterpunkt 1 Unterpunkt 2  Definitionslisten: Weiterhin gibt es noch Definitionslisten z.B. für Listen von Abkürzungen oder Vokabeln:\nDefinitionslisten werden mit dem Tag \u0026lt;dl\u0026gt; umschlossen.\n \u0026lt;dt\u0026gt; Bezeichnet den Term der Beschrieben werden soll\n \u0026lt;dd\u0026gt; Bezeichnet die Beschreibung des Terms.\n  Beispiel:\n\u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;DNS\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;Domain Name Service\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;IP\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;Internet Protocoll\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt;  "
},
{
	"uri": "https://opencoding.de/python_mit_turtle/07_zufallsmuster/",
	"title": "Zufallsmuster",
	"tags": [],
	"description": "",
	"content": " Aufgabe 1: Grundsätzliche Überlegungen Das folgende Programm erstellt eine Form:\nimport turtle def shape(): for i in range(4): turtle.forward(50) turtle.right(90) shape()  Beantworte folgende Fragen, passe das Programm dafür an:\n Wie müsste man das Programm verändern, wenn man eine dreiseitige Figur erstellen möchte?\n Wie müsste man das Programm verändern, wenn man eine fünfseitige Figur erstellen möchte?\n Was ist die Beziehung zwischen Seitenanzahl und Winkel, den die Turtle zeichnen muss.\n Was benötigst du noch, wenn du eine zufällige Figur zwischen 3 und 6 Ecken zeichnen möchtest?\n  Aufgabe 2: Parameter Damit das Unterprogramm beliebige Formen zeichnen kann, musst das Unterprogramm wissen, wie viele Seiten die Figur haben soll. Du kannst dies mit Hilfe von Parametern realisieren.\nBetrachte dazu folgendes Programm\ndef shape(anzahl): print(anzahl)\nanzahl = 3 shape(anzahl)\nProbiere aus, was passiert, wenn du den Wert für Anzahl in Zeile 3 durch 4,5 oder 6 ersetzt.\nHinweis: In repl.it siehst du die Ausgabe mit Klick auf Console\nAufgabe 3: Parameter verwenden Du kannst den Namen Anzahl in deiner Funktion wie eine Zahl verwenden.\ndef shape(anzahl): for i in range(anzahl): turtle.forward(100) turtle.right(...) shape()  Finde den richtigen Ausdruck für \u0026hellip; heraus, so dass die Figur mit der richtigen Anzahl an Seiten gezeichnet wird. Du kannst in die Klammern aus Rechenausdrücke einsetzen, wie z.B. anzahl*10, anzahl / 10, \u0026hellip;.\nAufgabe 4: Parameter verwenden Erweitere deine Programme aus den vorherigen Übungen so, dass zufällige Figuren gezeichnet werden.\n"
},
{
	"uri": "https://opencoding.de/html/08_css/",
	"title": "CSS",
	"tags": [],
	"description": "",
	"content": " Arbeitsauftrag HTML-Code kann mit Hilfe von CSS (Cascading Style Sheets) gestaltet werden.\nEine CSS Datei erstellen Erstelle eine neue Datei im gleichen Ordner wie deine HTML-Datei mit den Namen style.css.\nSchreibe in die Datei folgenden Text:\nb { color: red; }  Der Code gibt allen \u0026lt;b\u0026gt; Tags eine rote Farbe. Bevor du die Änderung sehen kannst, musst du die Datei noch in HTML einbinden.\nCSS-Datei im HTML-Code einbinden Dafür muss innerhalb des head-Tags folgender Code eingefügt werden.\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;style.css\u0026quot;/\u0026gt;  style.css ist der Dateiname deiner Datei. Wenn du diese anders nennst oder in einem anderen Ordner speicherst, musst du diese Stelle entsprechend abändern.\nEigenschaften zuweisen. Jetzt kannst du einige deiner HTML-Tags gestalten, indem du dem HTML-Tag Eigenschaften zuweist.\na { color: white; background-color: black; } b { color: red; }  Interessante css-Eigenschaften sind z.B. color, background-color, height, width, max-width, align, …\nAufbau einer CSS-Datei Referenz Eine Liste von Eigenscharten und möglichen Werten findest du hier: http://www.html-seminar.de/css-definitionen-uebersicht.htm\nTypische Fehlerquellen  Verwende kein = bei Wertzuweisungen (color : red, nicht color = red) Setze immer ein Semikolon ; am Ende einer Zeile, ansonsten werden deine nächsten Definitionen in der Regel nicht angewendet.  Mehr Infos über CSS  Mehr Infos zur Syntax: https://wiki.selfhtml.org/wiki/CSS/Tutorials/Einstieg/Syntax  "
},
{
	"uri": "https://opencoding.de/html/09_farben/",
	"title": "Farben",
	"tags": [],
	"description": "",
	"content": " Arbeitsauftrag  Markiere einen Text in deinem HTML-Dokument farbig. Färbe den Hintergrund eines HTML-Dokumentes farbig.  Syntax Zum Setzen von Farben kannst du die Attribute color und background-color verwenden.\nAls Wert kannst du entweder Farben mit Namen (red, green, \u0026hellip;) oder als Farbcode angeben, z.B. in der folgenden Form:\ncolor: black; background-color: green;  Farbcodes Farben können auch als Farbcode angegeben werden, z.B. als rgb-Wert (rgb: red, green, blue).\nBeispiel: Der Code #00FF00 stellt die Farbe grün dar:\n Der Anteil von rot (als Hexadezimalzahl) beträgt 00 Der Anteil von grün (als Hexadezimalzahl) beträgt FF = 255 Der Anteil von blau (als Hexadezimalzahl) beträgt 00  Farbcodes generieren: Du kannst Farbcodes unter http://www.colorpicker.com generieren.\n"
},
{
	"uri": "https://opencoding.de/html/10_boxmodell/",
	"title": "Das Box-Modell",
	"tags": [],
	"description": "",
	"content": " Arbeitsauftrag Erstelle mit dem Tag \u0026lt;div\u0026gt; einen Bereich mit Text, färbe den Hintergrund und lege Innen-und Außenabstände dieses Bereichs fest.\nTheorie: Das Boxmodell Wenn die Hintergrundfarben, Rahmen und Abstände zeichnen willst, ist es wichtig das Box-Modell von HTML / CSS zu verstehen:\nJedes Tag wird entweder inline dargestellt oder als Block.\nDu kannst die Eigenschaft umstellen mit dem Attribut display .\nBeispiel: Ein link wird normalerweise inline im Text dargestellt. Wenn dieser als Block modelliert werden soll (z.B. weil er wie ein Button aussehen soll, dann musst du folgendes schreiben:\na { display: block; }  Besser siehst du dies, wenn du dem Link einen Rahmen gibst:\na { display: block; border: 1px solid black }  Dies sieht so aus:\nEin Link\nAls Block nimmt\nBlöcke und Abstände Ein Block kann über Inhalt, Rahmen und Abstände definiert werden:Margin Legst die außenabstände fest.\nBeispiele:\nmargin: 10 px; margin-left: 5px;  Border Legt den den Rahmen fest, z.B. für einen Rahmen der Dicke 1 px in schwarz:\nborder: 1px solid black;  Es gibt ziemlich viele zusätzliche Attribute zum Gestalten von Rahmen: https://wiki.selfhtml.org/wiki/CSS/Eigenschaften/%C3%A4u%C3%9Fere_Gestaltung/Rahmen\nPadding Legt die Innenabstände fest.\nBeispiele:\npadding: 10 %; padding-right: 5px;  Diese Eigenschaften funktionieren nur bei Elementen mit der Eigenschaft display : block!\n"
},
{
	"uri": "https://opencoding.de/html/11_klassen/",
	"title": "Klassen",
	"tags": [],
	"description": "",
	"content": " Arbeitsauftrag Erstelle mehrere Tags gleicher Art. Gestalte mit Hilfe von Klassen nur einzelne Objekte dieses Tags.\nDu kannst z.B. mehrere Links erstellen und einige Links als button gestalten.\nTheorie: Klassen Klassen sind im Baupläne oder Schablonen. Die Idee ist es, CSS Code wiederzuverwenden, denn mit Hilfe von Klassen must du nicht jeden einzelnen Link einzeln formatieren.\nBeispiel: Buttons Sollen bestimmte Links als Buttons gezeigt werden, so weist man all diesen Links die Klasse button zu. Sollen die selben Links in rot formatiert werden, so weist man ihnen zusätzlich die Klasse red zu.\nIn deinem HTML-Code können Klassen mit Hilfe des Attributes class zugewiesen werden:\n\u0026lt;a href=\u0026quot;impressum.html\u0026quot; class=\u0026quot;button red\u0026quot;\u0026gt;Impressum\u0026lt;/a\u0026gt;  Dies weist dem Link die Klassen button und red zu.\nIn der CSS-Datei können diese Klassen nun folgendermaßen formattiert werden:\nbutton { border: 1px solid black; padding: 5px; } .red { background-color: red; }  Im CSS Code wird vor die Klasse ein Punkt geschrieben, um sie von Tags zu unterscheiden.\n"
},
{
	"uri": "https://opencoding.de/html/12_links_pseudoklassen/",
	"title": "Links und Pseudoklassen",
	"tags": [],
	"description": "",
	"content": " Arbeitsauftrag Erstelle einen Link und gestalte mit CSS den Link unterschiedlich je anchdem, ob dieser bereits besucht wurde oder noch nicht besucht wurde. Füge einen Hover-Effekt beim Überfahren mit der Maus hinzu.\nTheorie: Pseudoklassen Beim gestalten von Links gibt es eine Besonderheit, die man beachten muss:\nLinks können verschiedene Zustände haben, je nachdem, ob diese bereits besucht wurden. Man kann diese folgendermaßen stylen:\na:link bezeichnet einen noch nicht besuchten Link. a:visited bezeichnet einen besuchten Link.\nMan nennt dies auch Pseudoklassen. Weitere Pseudoklassen sind a:hover wenn die Maus gerade über einen Link fährt sowie a:active für einen ausgewählten Link.\nReihenfolge der Definitionen a:hover muss dabei nach a:link und a:visited definiert werden, damit es einen Effekt hat. Man kann mit hover auch andere Elemente stylen.\nWeitere Pseudoklassen Es gibt noch weitere Pseudo-Klassen, mit denen man Elemente auswählen kann, z.B. li:nth-child(even) um nur gerade Listenelemente auszuwählen. Siehe: https://wiki.selfhtml.org/wiki/CSS/Selektoren/Pseudoklasse/strukturelle_Pseudoklasse/nth-child\n"
},
{
	"uri": "https://opencoding.de/html/13_flexbox/",
	"title": "Flexbox",
	"tags": [],
	"description": "",
	"content": " Arbeitsauftrag: Erstelle eine Webseite, bei der Elemente mit dem flexbox-Layout angeordnet werden.\nTheorie: Das Flex-Box-Modell Das Flexbox-Modell ist eine Möglichkeit, wie du Inhalte anordnen kannst, z.B. in Spalten.\nFlexbox kennt prinzipiell mit der display-Eigenschaft verwenden:\n.container { display: flex }  So kannst du die Kindelemente in dem Container platzieren:\n.container { display: flex }  \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;child\u0026quot;\u0026gt;Item 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;child\u0026quot;\u0026gt;Item 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;child\u0026quot;\u0026gt;Item 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  Dies sieht (wenn du den Child-Elementen noch etwas Rahmen und Abstand gibst) folgendermaßen aus:\nDies sind bereits die Grundlagen von Flexbox. In Kombination mit margin, padding und border kannst du jetzt vielfältige Layouts erstellen, die auch auf unterschiedlichen Endgeräten gut aussehen.\nMit weiteren Attributen kannst du die Darstellung verfeinern.\nRichtung: .container { flex-direction: row | row-reverse | column | column-reverse; }  Dies gibt die Richtung an, in der die Spalten angeordnet werden.\n.child { order: \u0026lt;integer\u0026gt;; /* default is 0 */ }  Dies legt die Reihenfolge der Elemente fest. Je kleiner der Wert umso weiter vorne wird das Element angezeigt.\n.container{ flex-wrap: nowrap | wrap | wrap-reverse; }  Gibt an, ob Elemente in die nächste Zeile verschoben werden dürfen.\nInhalt anordnen .container { justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right }  Ordnet die Elemente horizontal an.\nInhalt vertikal anordnen .container { align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end }  Gibt die Vertikale Anordnung der Elemente an.\nMehr Informationen: Hier findest du alle Eigenschaften von Flexbox anschaulich dargestellt: https://css-tricks.com/snippets/css/a-guide-to-flexbox/\n"
},
{
	"uri": "https://opencoding.de/html/wichtige-ideen-und-konzepte/",
	"title": "Wichtige Ideen und Konzepte",
	"tags": [],
	"description": "",
	"content": " Trennung von Layout, Struktur und Inhalt.  "
},
{
	"uri": "https://opencoding.de/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Open Coding Lerneinheiten  Python mit Turtlegrafik  Python mit Turtlegrafik In diesem Tutorial lernst du, wie du mit Hilfe von Turtle-Grafik mit Python Algorithmen erstellen kannst. Lizenz Die Übungen basieren auf Arbeitsblättern von James Watts https://community.computingatschool.org.uk/resources/2851/single . Das komplette Tutorial steht unter Creative Commons by-sa 3.0-Lizenz.\n Python - Textadventures  Python Textadventures In diesem Tutorial lernst du, wie du mit Python einfache Textadventures erstellen kannst.\n Computergrafik mit Pygame  Computergrafik mit Pygame In diesem Tutorial lernst du, wie du mit Python und Pygame zeichnen und Animationen erstellen kannst.\n Algorithmik  Datenstrukturen und Algorithmen Aufgabensammlung Datenstrukturen und Algorithmen Lizenz: CC-BY 4.0\n Data Science  Data Science Listen + Matplotlib\n HTML  HTML Tutorial: HTML, CSS, Bootstrap Lizenz: CC-BY 4.0\n Interaktive Kurse Die Kurse laufen auf der Plattform stepik.org und enthalten zahlreiche interaktive Übungen.\nLaufende Kurse Die folgenden Kurse laufen zur Zeit. Du kannst an ihnen teilnehmen, erhälst aber bei Aufgaben keine vollen Punkte, wenn du diese nicht von Anfang an verfolgt hast.\n Informatisches Denken mit Python 2019 - Angelaufen\n Netzwerke und Internet\n  Offen für alle Bei abgelaufenen Kursen entferne ich die Fristen, so dass du volle Punktzahlen für die Lektionen erhälst.\n Python Kurs 2019\n SQL-Kurs 2019\n  Miniworldmaker  Miniworldmaker - Der Miniworldmaker ist ein Framework -ähnlich zu Greenfoot in Java-, mit welchem du Spiele in Miniwelten entwerfen kannst.  "
},
{
	"uri": "https://opencoding.de/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://opencoding.de/datenschutz/",
	"title": "Datenschutzerklärung",
	"tags": [],
	"description": "",
	"content": " Datenschutzerklärung Generelle Informationen Dieses Blog wird bei Uberspace gehostet. Wenn Sie dieses Blog besuchen, werden automatisch einige Daten an den Webserver übertragen und dort gespeichert. Dies ist zur Anzeige dieser Webseite technisch erforderlich und beschränkt sich auf den dafür notwendigen Umfang. Es handelt sich insbesondere um folgende Informationen: die Referrer-URL (die Webseite, von der Sie kommen) / die IP-Adresse des Gerätes, mit dem sie auf den Blog zugreifen / den verwendeten Browser / Uhrzeit und Datum / das verwendete Betriebssystem. Diese Informationen dienen dazu, dieses Blog überhaupt anbieten zu können. Sie können keinen bestimmten Personen zugeordnet werden und werden nicht mit personenbezogenen Informationen zusammengeführt. Eine rein statistische Auswertung bleibt vorbehalten. Sobald die Informationen nicht mehr benötigt werden, werden sie gelöscht oder anonymisiert.\nDen Vertrag zur Auftragsverarbeitung mit Uberspace finden sie hier\nExterne Bibliotheken Auf dieser Seite werden Programme von repl.it eingebunden. Lese die Datenschutzerklärung von repl.it\nKommentare Kommentare werden mit dem Tool utteranc.es auf github gespeichert. Wenn du Kommentare auf dieser Webseite hinterlässt, erklärst du dich mit den Bestimmungen von github einverstanden. Andere Benutzer können den Github-Benutzernamen und den Zeitpunkt der Kommentierung selbst lesen. Utterances gibt selbst an: \u0026ldquo;No tracking, no ads, always free\u0026rdquo;\nButtons zum Teilen der Beiträge Unter den Beiträgen befinden sich Schaltflächen, mit denen Beiträge über Google+, Facebook, Twitter, Xing sowie per E-Mail geteilt werden können. Bei diesen Schaltflächen handelt es sich nicht um „Social Plugins“, sondern um bloße Links. Sofern Sie die Schaltflächen nicht benutzen, werden keinerlei Daten an die genannten Unternehmen übertragen. Ihre Surfverhalten auf diesem Blog kann somit von diesen Unternehmen nicht verfolgt werden. Nur wenn Sie sich entschließen, die Buttons zu nutzen um Blog-Beiträge zu teilen (und sich dazu ggf. bei den genannten Seiten einloggen), erhält das betreffende Unternehmen – z.B. Facebook\nVerantwortliche Stelle im Sinne des Datenschutzrechts (BDSG/TMG)  Andreas Siebel Usinger Straße 1 61273 Wehrheim Email: andreas.siebel@it-teaching.de  Wenn Sie Ansprüche auf Auskunft, Berichtigung, Sperrung oder Löschung nach dem BDSG geltend machen oder eine ggf. erteilte Einwilligung widerrufen wollen, wenden Sie sich bitte bevorzugt an die genannte E-Mail-Adresse.\n"
},
{
	"uri": "https://opencoding.de/html/wichtige-ideen-und-konzepte/layout_struktur_inhalt/",
	"title": "Konzept - Trennung von Inhalt, Struktur und Layout",
	"tags": [],
	"description": "",
	"content": " Warum sollte man überhaupt Inhalt, Struktur und Layout trennen? Einer der Kernideen von HTMl+CSS ist es, Inhalt, Layout und Struktur zu trennen.\nDies hat folgende Vorteile:\n Ein Text kann unabhängig vom Ausgabemedium erstellt werden. Eine Webseite soll z.B. anders aussehen, je nachdem ob sie auf einem PC, Handy oder Tablet dargestellt werden soll.\n Kollaboratives Arbeiten: Wenn du in Word-Dateien ohne Trennung von Layout/Inhalt/Struktur zusammenarbeitest, dann muss auch jeder Bearbeiter des Dokuments am Layout mitarbeiten, selbst wenn er z.B. nur ein Lektorat macht. Das gemeinsame Arbeiten sollte daher am besten nur auf dem Text basieren und das Layout unabhängig davon erstellt werden.\n  Inhalt Dies ist der eigentliche Inhalt.\nStruktur Informationen darüber, wie der Inhalt strukturiert ist (Überschriften, Listen, \u0026hellip;)\nLayout Informationen darüber, wie der Inhalt gestaltet ist.\nWo findet man dieses Prinzip? Dieses Prinzip trifft man an unterschiedlicher Stellen in der Informatik:\n Bei graphischen Benutzeroberflächen (GUIS) sollte der Code für die Anzeige, das Datenmodell und die Steuerung getrennt werden (Pattern: Model View Controler)\n In Word\u0026amp;co kannst du mit Hilfe von Formatvorlagen Inhalt und Layout trennen. Beim Bearbeiten legst du Formatvorlagen fest (Überschrift, Listen, \u0026hellip;) und kannst an anderer Stelle für eine komplette Formatvorlage das Layout ändern.\n HTML dient als Schnittstelle zwischen Programmiern und Designern: Programmierer erstellen oft mit Hilfe von Frameworks HTML-Code. Die Designer können dann diesen HTML-Code mit Hilfe von CSS gestalten ohne Wissen darüber zu besitzen, wie dieser HTML-Code genau generiert wird.\n  "
},
{
	"uri": "https://opencoding.de/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]